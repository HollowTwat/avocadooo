import asyncio
import re
import aiogram
import random
import os
import logging
from aiogram import Bot, Dispatcher, types
import openai
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputMediaVideo
from openai import AsyncOpenAI, OpenAI
from stickerlist import STICKERLIST
import shelve
import json

from functions import *

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")
ASSISTANT_ID = os.getenv("RECOGNIZE_MAKEUP_ASS")
ASSISTANT_ID_2 = os.getenv("FIND_PRODUCT_ASS")
YAPP_ASS = os.getenv("YAPP_ASS")

ANALYSIS_G_FACE_ASS = os.getenv("ANALYSIS_G_FACE_ASS")
ANALYSIS_G_BODY_ASS = os.getenv("ANALYSIS_G_BODY_ASS")
ANALYSIS_G_HAIR_ASS = os.getenv("ANALYSIS_G_HAIR_ASS")

ANALYSIS_P_FACE_ASS = os.getenv("ANALYSIS_P_FACE_ASS")
ANALYSIS_P_BODY_ASS = os.getenv("ANALYSIS_P_BODY_ASS")
ANALYSIS_P_HAIR_ASS = os.getenv("ANALYSIS_P_HAIR_ASS")

TOKEN = BOT_TOKEN
arrow_back = "‚¨ÖÔ∏è"
arrow_menu = "‚èèÔ∏è" #üÜï

bot = Bot(token=TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)


class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)


class UserState(StatesGroup):
    info_coll = State()
    recognition = State()
    yapp = State()
    menu = State()
    yapp_with_xtra = State()

class Questionnaire(StatesGroup):
    name = State()
    intro = State()
    age = State()
    gender = State()
    location = State()
    allergy = State()
    lifestyle = State()
    phototype = State()
    activity = State()
    water_intake = State()
    stress = State()
    habits = State()
    ethics = State()

class QuestionnaireFace(StatesGroup):
    skin_type = State()
    skin_condition = State()
    skin_issues = State()
    skin_goals = State()

class QuestionnaireBody(StatesGroup):
    body_skin_type = State()
    body_skin_sensitivity = State()
    body_skin_condition = State()
    body_hair_issues = State()
    body_attention_areas = State()
    body_goals = State()

class QuestionnaireHair(StatesGroup):
    scalp_type = State()
    hair_thickness = State()
    hair_length = State()
    hair_structure = State()
    hair_condition = State()
    hair_goals = State()
    washing_frequency = State()
    current_products = State()
    product_texture = State()
    sensitivity = State()
    styling_tools = State()


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(full_sequence=False)
    # buttons = [
    #     [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç", callback_data="analysis")],
    #     [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–ù–∞—á–∞–ª–æ", callback_data="questionaire2")],
    #     [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–õ–∏—Ü–æ", callback_data="questionnaire_face")],
    #     [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–¢–µ–ª–æ", callback_data="questionnaire_body")],
    #     [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–í–æ–ª–æ—Å—ã", callback_data="questionnaire_hair")],
    #     [InlineKeyboardButton(text="–§—É–ª–ª_–≤–≤–æ–¥–Ω–∞—è_–≤–µ—Ä—Å–∏—è", callback_data="all_questionnaires")],
    #     [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è:", callback_data="settings")],
    #     [InlineKeyboardButton(text="setstate_yapp", callback_data="setstate_yapp")],
    #     ]
    buttons = [[InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å–Ω–∏–∫", callback_data="all_questionnaires")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ü—Ä–∏–≤–µ—Ç, —è –∑–∞–¥–∞–º —Ç–µ–±–µ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
    await message.answer(step0txt, reply_markup=keyboard)


@router.message(Command("menu"))
async def menu_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="analysis")],
        [InlineKeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å —É Avocado Bot ü•ë", callback_data="setstate_yapp")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è:", callback_data="settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    await message.answer(step0txt, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'menu')
async def menu_cb_handler(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", callback_data="analysis")],
        [InlineKeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å —É Avocado Bot ü•ë", callback_data="setstate_yapp")],
        [InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è:", callback_data="settings")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ú–µ–Ω—é"
    await callback_query.message.edit_text(step0txt, reply_markup=keyboard)

@router.message(Command("devmenu"))
async def devmenu_handler(message: Message, state: FSMContext) -> None:
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="My Avocado Box AI üíö", callback_data="avo_box")],
        [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã üí•", callback_data="avo_promo")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ü—Ä–∏–≤–µ—Ç"
    await message.answer(step0txt, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'avo_box')
async def process_avo_box(callback_query: CallbackQuery, state: FSMContext):
    buttons = [[InlineKeyboardButton(text="–£—Ä–≤–∞—Ç—å –±–æ–∫—Å", callback_data="avo_box_2")]]
    text = "–°–æ–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π My Avocado Box AI!\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—á–µ—Ç—Å—è.\n\n–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏ —Å–æ —Å–∫–∏–¥–∫–∞–º–∏ –¥–æ 50% ‚Äì —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ —Å—É–ø–µ—Ä—Ü–µ–Ω–∞–º.\n\n–ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç –ê–≤–æ–∫–∞–¥—Å–∫–æ–π –ö–æ–Ω—Ç–æ—Ä—ã üíö\n\n–ù–∏–∫–∞–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–Ω–æ—á–µ–∫ ‚Äì —Ç–æ–ª—å–∫–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –±—å—é—Ç–∏-–±–æ–∫—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞—à–µ–π –∫–æ–∂–µ!"
    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(lambda c: c.data == 'avo_promo')
async def process_avo_promo(callback_query: CallbackQuery, state: FSMContext):
    buttons = [[InlineKeyboardButton(text="–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∏–¥–∫–æ–π", callback_data="avo_promo_2")]]
    text = "–°–∫–∏–¥–∫–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!\n\n–ú—ã –æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –≤—Å–µ –ª—É—á—à–∏–µ —ç–∫–æ-–±—Ä–µ–Ω–¥—ã ‚Äì –¥—Ä—É–∑–µ–π My Avocado Box, —á—Ç–æ–±—ã —É –≤–∞—Å –≤—Å–µ–≥–¥–∞ –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–µ –ø–æ —Å–∞–º–æ–π –ø—Ä–∏—è—Ç–Ω–æ–π —Ü–µ–Ω–µ. \n\nüåø–õ—É—á—à–∏–µ –±—Ä–µ–Ω–¥—ã –≥–æ—Ç–æ–≤—ã —Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏.\n\nüíö–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ —Å–∫–∏–¥–∫–∏ 15-20% ‚Äì —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ –¥–ª—è –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.\n\n‚ú® –õ—É—á—à–µ–µ –∏–∑ –º–∏—Ä–∞ —ç–∫–æ-–∫–æ—Å–º–µ—Ç–∏–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ, –ø—Ä–æ–±—É–π—Ç–µ, –≤–ª—é–±–ª—è–π—Ç–µ—Å—å ‚Äì —Å Avocado Bot –≤—ã –≤—Å–µ–≥–¥–∞ –≤ –≤—ã–∏–≥—Ä—ã—à–µ!"
    await callback_query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(lambda c: c.data == 'avo_box_2')
async def process_avo_box_2(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("indev")

@router.callback_query(lambda c: c.data == 'avo_promo_2')
async def process_avo_promo_2(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("indev")

@router.message(StateFilter(Questionnaire.name))
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ö–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å, Avocado?", callback_data="what_do_you_do")]
            ]
        )
    await state.set_state(Questionnaire.intro)
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!  üåø \n–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–æ—Å—Ç–∞–≤–∞ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ –Ω–µ–π —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç."    
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∫–æ–∂–µ –∏ –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ —è –ø–æ–¥–±–µ—Ä—É —Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ <b>–≤–∞–º</b>.  –ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å, –∫–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –∞ –∫–∞–∫–∏–µ –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª–∫–µ.  –í—Å—ë –ø—Ä–æ—Å—Ç–æ ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—ã–±–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∏–º–µ–Ω–Ω–æ –≤–∞–º!"
        , reply_markup=keyboard
    )

@router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data == 'what_do_you_do')
async def process_questionnaire_yapp(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "–ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –±–∞–Ω–æ—á–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —É–∑–Ω–∞—Ç—å –æ –≤–∞—Å! \n"
        "ü§î –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∞–Ω–∫–µ—Ç—É ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–º–µ–Ω–Ω–æ –≤–∞–º. –ì–æ—Ç–æ–≤—ã?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="agreement_yes"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="agreement_no")]
        ])
    )
    await callback_query.answer()

                                                  
@router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data.startswith("agreement_"))
async def process_agreement(callback_query: types.CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    print("hit_agreement")
    if callback_query.data == "agreement_no":
        text = ( 
            "–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ —É –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ –¥–µ–ª, –Ω–æ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—Å, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ. üòû \n\n"  
            "–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —ç—Ç–æ–º—É, –∫–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ? Avocado –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º!"
        )

        await callback_query.message.edit_text(text)
        await state.clear()

    elif callback_query.data == "agreement_yes":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–≠—Ç–æ —Ç–æ—á–Ω–æ, –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!", callback_data="lesgo")]
            ]
        )
        user_data = await state.get_data()
        text = (
            "<b>–ß–∞—Å—Ç—å 1/4</b> üü¢‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è\n"
            "<b>11 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–±–µ </b>\n\n"
            f"{user_data['name']}, —á—Ç–æ–±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –≤–∞—Å –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é, –º–Ω–µ –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ –≤–∞—à–µ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏, —Ñ–æ—Ç–æ—Ç–∏–ø–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.  üå± "
            "–í–µ–¥—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –≤–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –∏ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º. –ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç? –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º!"
        )

        await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.intro), lambda c: c.data == 'lesgo')
async def process_questionnaire_lesgo(callback_query: CallbackQuery, state: FSMContext):

    
    await callback_query.message.edit_text(
        "1) –ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ. \n–°–∫–æ–ª—å–∫–æ –≤–∞–º –≥–æ–¥–∏–∫–æ–≤?   \n–ù–∞–ø–∏—à–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, 35</i>"
    )
    pattern = r'^(0|[1-9]\d?|1[01]\d|120)$'
    if re.match(pattern, callback_query.text):
        await state.set_state(Questionnaire.age)
        await process_age(callback_query, state)
    else:
        await callback_query.answer("–ù–µ –ø–æ–Ω—è–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ  –µ—â—ë —Ä–∞–∑ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±—É–∫–≤.")
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.age))
async def process_age(message: types.Message, state: FSMContext):
    current_data = await state.get_data()
    print(f"Updated state in process_all_questionnaires: {current_data}")
    await state.update_data(age=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")]
        ]
    )
    await state.set_state(Questionnaire.gender)
    await message.answer("–ü—Ä–∏–Ω—è—Ç–æ")
    await message.answer("2) –¢–≤–æ–π –ø–æ–ª", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.gender), lambda c: c.data.startswith("gender_"))
async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = "–ñ–µ–Ω—Å–∫–∏–π" if callback_query.data == "gender_female" else "–ú—É–∂—Å–∫–æ–π"
    await state.update_data(gender=gender)
    
    await callback_query.message.edit_text(
        "3) –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: \n<i>–†–æ—Å—Å–∏—è, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>"
    )
    pattern = r'^[–ê-–Ø–∞-—è–Å—ë\s-]+, [–ê-–Ø–∞-—è–Å—ë\s-]+$'
    if re.match(pattern, callback_query.text):
        await state.set_state(Questionnaire.location)
        await process_location(callback_query, state)
    else:
        await callback_query.answer("–ù–µ –ø–æ–Ω—è–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑.")
    
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.location))
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="allergy_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="allergy_no")]
        ]
    )
    await state.set_state(Questionnaire.allergy)
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä—é!")
    await message.answer("4) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–º —Ä–µ–∞–∫—Ü–∏—è–º?", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.allergy), lambda c: c.data.startswith("allergy_"))
async def process_allergy(callback_query: types.CallbackQuery, state: FSMContext):
    allergy = "–î–∞" if callback_query.data == "allergy_yes" else "–ù–µ—Ç"
    await state.update_data(allergy=allergy)
    await state.set_state(Questionnaire.lifestyle)
    await callback_query.message.answer(
        "5) –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: –∫–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å? <i>–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤</i>\n"
        "1 - –ß–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ\n"
        "2 - –†–∞–±–æ—Ç–∞—é –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º)\n"
        "3 - –°–∏–¥—è—á–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
        "4 - –ß–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å)\n"
        "5 - –ú–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ \n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2)</i>"
    )
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    lifestyle_nums = [int(x) for x in message.text.replace(",", " ").split()]
    lifestyle_descriptions = {
        1 : "–ß–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ",
        2 :  "–†–∞–±–æ—Ç–∞—é –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º)",
        3 : "–°–∏–¥—è—á–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        4 : "–ß–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å)",
        5 : "–ú–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π",
    }
    lifestyle_texts = [lifestyle_descriptions[lifestyle] for lifestyle in lifestyle_nums if lifestyle in lifestyle_descriptions]
    await state.update_data(lifestyle=lifestyle_texts)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text=str(i), callback_data=f"phototype_{i}") for i in range(1, 7)
        ]]
    )
    await state.set_state(Questionnaire.phototype)
    await message.answer(
        "6) –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ç–æ—Ç–∏–ø —Ç–≤–æ–µ–π –∫–æ–∂–∏:\n"
        "1 ‚Äî –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω–µ–µ—Ç\n"
        "2 ‚Äî –°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º\n"
        "3 ‚Äî –°–≤–µ—Ç–ª–∞—è/—Å—Ä–µ–¥–Ω—è—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ\n"
        "4 ‚Äî –°—Ä–µ–¥–Ω—è—è/–æ–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
        "5 ‚Äî –¢–µ–º–Ω–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç, –±—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
        "6 ‚Äî –û—á–µ–Ω—å —Ç–µ–º–Ω–∞—è –∫–æ–∂–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç\n"
        "–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ \n<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2)</i>",
        reply_markup=keyboard
    )

@router.callback_query(StateFilter(Questionnaire.phototype), lambda c: c.data.startswith("phototype_"))
async def process_phototype(callback_query: types.CallbackQuery, state: FSMContext):
    phototype = callback_query.data.split("_")[1]
    phototype_map = {
        "1": "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω–µ–µ—Ç",
        "2": "–°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º",
        "3": "–°–≤–µ—Ç–ª–∞—è/—Å—Ä–µ–¥–Ω—è—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ",
        "4": "–°—Ä–µ–¥–Ω—è—è/–æ–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
        "5": "–¢–µ–º–Ω–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç, –±—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
        "6": "–û—á–µ–Ω—å —Ç–µ–º–Ω–∞—è –∫–æ–∂–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç",
    }
    description = phototype_map.get(phototype, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ç–æ—Ç–∏–ø")
    await state.update_data(phototype=description)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–∞—è (—Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)", callback_data="activity_low")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω—è—è (—Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —É–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)", callback_data="activity_mid")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è (–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)", callback_data="activity_high")]
        ]
    )
    await state.set_state(Questionnaire.activity)
    await callback_query.message.edit_text("7) –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire.activity), lambda c: c.data.startswith("activity_"))
async def process_activity(callback_query: types.CallbackQuery, state: FSMContext):
    activity_map = {
        "activity_low": "–ù–∏–∑–∫–∞—è",
        "activity_mid": "–°—Ä–µ–¥–Ω—è—è",
        "activity_high": "–í—ã—Å–æ–∫–∞—è"
    }
    activity = activity_map[callback_query.data]
    await state.update_data(activity=activity)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞", callback_data="water_<1")],
            [InlineKeyboardButton(text="1‚Äì2 –ª–∏—Ç—Ä–∞", callback_data="water_1-2")],
            [InlineKeyboardButton(text="–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤", callback_data="water_>2")]
        ]
    )
    await state.set_state(Questionnaire.water_intake)
    await callback_query.message.edit_text("8) –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã –æ–±—ã—á–Ω–æ –ø—å—ë—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire.water_intake), lambda c: c.data.startswith("water_"))
async def process_water_intake(callback_query: types.CallbackQuery, state: FSMContext):
    water_map = {
        "water_<1": "–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞",
        "water_1-2": "1‚Äì2 –ª–∏—Ç—Ä–∞",
        "water_>2": "–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤"
    }
    water_intake = water_map[callback_query.data]
    await state.update_data(water_intake=water_intake)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="stress_low")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="stress_mid")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="stress_high")]
        ]
    )
    await state.set_state(Questionnaire.stress)
    await callback_query.message.edit_text("9) –í–∞—à–∏ –Ω–µ—Ä–≤–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ —É—Å–ø–µ–≤–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è? –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire.stress), lambda c: c.data.startswith("stress_"))
async def process_stress(callback_query: types.CallbackQuery, state: FSMContext):
    stress_map = {
        "stress_low": "–ù–∏–∑–∫–∏–π",
        "stress_mid": "–°—Ä–µ–¥–Ω–∏–π",
        "stress_high": "–í—ã—Å–æ–∫–∏–π"
    }
    stress = stress_map[callback_query.data]
    await state.update_data(stress=stress)
    stress_message_map = {
        "stress_low": "–î–∞ –≤—ã, –∫—Ä–µ–ø–∫–∏–π –æ—Ä–µ—à–µ–∫! ü•ë –≠—Ç–æ –±–æ–ª—å—à–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å!  –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã - —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫!",
        "stress_mid": "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–∞–º–æ–ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Öüíñ",
        "stress_high": "–î–∞–≤–∞–π—Ç–µ –æ–±–Ω–∏–º—É! ü§ó–û—á–µ–Ω—å –≤–∞—Å –ø–æ–Ω–∏–º–∞—é! –ë–æ–ª—å—à–µ 70% –ª—é–¥–µ–π –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ–º—É —Å—Ç—Ä–µ—Å—Å—É! –î–æ–±—Ä—ã–π —Å–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏—Ç–µ –º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å Prosto –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–∏—Ç–∞–Ω–∏–µ–º —Å Nutri –∏ –≤—Å–µ –Ω–∞–ª–∞–¥–∏—Ç—Å—è –≤–æ—Ç —É–≤–∏–¥–∏—Ç–µ! üíö"
    }
    await callback_query.message.edit_text(stress_message_map[callback_query.data])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ", callback_data="habits_smoking")],
            [InlineKeyboardButton(text="–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_drinking")],
            [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_both")],
            [InlineKeyboardButton(text="–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="habits_none")]
        ]
    )
    await state.set_state(Questionnaire.habits)
    await callback_query.message.answer("10) –£ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–∏ –º–∞–ª–µ–Ω—å–∫–∏–µ —Å–ª–∞–±–æ—Å—Ç–∏. –ö–∞–∫–∏–µ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –≤–∞–º –∑–Ω–∞–∫–æ–º—ã? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –∑–¥–µ—Å—å –Ω–µ—Ç –æ—Å—É–∂–¥–µ–Ω–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–±–æ—Ç–∞ –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire.habits), lambda c: c.data.startswith("habits_"))
async def process_habits(callback_query: types.CallbackQuery, state: FSMContext):
    habits_map = {
        "habits_smoking": "–ö—É—Ä–µ–Ω–∏–µ",
        "habits_drinking": "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
        "habits_both": "–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
        "habits_none": "–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
    }
    habits = habits_map[callback_query.data]
    await state.update_data(habits=habits)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free", callback_data="ethics_cruelty_free")],
            [InlineKeyboardButton(text="–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="ethics_none")]
        ]
    )
    await state.set_state(Questionnaire.ethics)
    await callback_query.message.edit_text("11) –≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã: —á—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ—Å–º–µ—Ç–∏–∫–∏?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire.ethics), lambda c: c.data.startswith("ethics_"))
async def process_ethics(callback_query: types.CallbackQuery, state: FSMContext):
    ethics = "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free" if callback_query.data == "ethics_cruelty_free" else "–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    us_id = callback_query.from_user.id
    await state.update_data(ethics=ethics)
    user_data = await state.get_data()
    await callback_query.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data['name']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ü–æ–ª: {user_data['gender']}\n"
        f"–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {user_data['location']}\n"
        f"–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergy']}\n"
        f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: {', '.join(map(str, user_data['lifestyle']))}\n"
        f"–§–æ—Ç–æ—Ç–∏–ø: {user_data['phototype']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']}\n"
        f"–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º: {user_data['water_intake']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {user_data['stress']}\n"
        f"–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: {user_data['habits']}\n"
        f"–≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data['ethics']}"
    )

    user_data_gen = {
                "name": f"{user_data['name']}",
                "age": f"{user_data['age']}",
                "gender": f"{user_data['gender']}",
                "location": f"{user_data['location']}",
                "allergy": f"{user_data['allergy']}",
                "lifestyle": f"{user_data['lifestyle']}",
                "phototype": f"{user_data['phototype']}",
                "activity": f"{user_data['activity']}",
                "water_intake": f"{user_data['water_intake']}",
                "stress": f"{user_data['stress']}",
                "habits": f"{user_data['habits']}"
            }
    response = await send_user_data(us_id, user_data_gen, "SetUserBaseData", "user_data")
    await callback_query.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

    full_sequence = user_data.get("full_sequence", False)
    if full_sequence:
        await process_questionnaire_face(callback_query, state)
    else:
        await state.clear()
        await callback_query.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")


@router.callback_query(StateFilter(QuestionnaireFace.skin_type), lambda c: True)
async def process_face_skin_type(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(face_skin_type=callback_query.data)
    current_data = await state.get_data()
    print(f"Updated state in process_all_questionnaires: {current_data}")
    await state.set_state(QuestionnaireFace.skin_condition)
    await callback_query.message.edit_text(
        "13) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–±–µ–∑–≤–æ–∂–µ–Ω–Ω–∞—è", callback_data="dehydrated")],
            [InlineKeyboardButton(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", callback_data="sensitive")],
            [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireFace.skin_condition), lambda c: True)
async def process_face_skin_condition(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(face_skin_condition=callback_query.data)
    await state.set_state(QuestionnaireFace.skin_issues)
    pre_message_map = {
        "dehydrated": "–û–±–µ–∑–≤–æ–∂–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Å–∏–≥–Ω–∞–ª SOS –æ—Ç –∫–æ–∂–∏! –£–∂–µ —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤—ã–π —à–∞–≥ ‚Äî –Ω–∞–ª–∏—Ç—å —Å–µ–±–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã –∏ –≤—ã–ø–∏—Ç—å. –Ø –ø–æ–¥–æ–∂–¥—É, –Ω–∏–∫—É–¥–∞ –Ω–µ –∏—Å—á–µ–∑–Ω—É! ¬†üí¶",
        "sensitive": "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ ‚Äî –∫–æ–≥–¥–∞ –¥–∞–∂–µ –ª—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä–æ–∫ –≤—ã–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é. –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è –ª–µ–¥–∏, –µ–π –Ω—É–∂–Ω–æ –æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–±–æ—Ç–∞! ü¶ã",
        "normal": "–í–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–ª–æ ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞ —ç—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä–æ–π –º–æ–∂–Ω–æ –≥–æ—Ä–¥–∏—Ç—å—Å—è! ‚ú®üçÉ–ù–æ –¥–∞–∂–µ –µ–π –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –∑–∞–±–æ—Ç—ã, —á—Ç–æ–±—ã —Å–∏—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
    }
    await callback_query.message.edit_text(pre_message_map[callback_query.data])
    await callback_query.message.answer(
        "14) –ï—Å—Ç—å –ª–∏ —É –≤–∞—à–µ–π –∫–æ–∂–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏? \n"
        "1 - –ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n"
        "2 - –ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω\n"
        "3 - –ê–∫–Ω–µ, –ø–æ—Å—Ç–∞–∫–Ω–µ\n"
        "4 - –†—É–±—Ü—ã –∏ —à—Ä–∞–º—ã\n"
        "5 - –ú–æ—Ä—â–∏–Ω—ã\n"
        "6 - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã\n"
        "7 - –û—Ç–∫—Ä—ã—Ç—ã–µ –∏/–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–º–µ–¥–æ–Ω—ã\n"
        "8 - –°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è\n"
        "9 - –°—É—Ö–æ—Å—Ç—å, —à–µ–ª—É—à–µ–Ω–∏–µ\n"
        "10 - –ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º\n\n"
        "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
        reply_markup=None
    )
    await callback_query.answer()

@router.message(StateFilter(QuestionnaireFace.skin_issues))
async def process_face_skin_issues(message: types.Message, state: FSMContext):
    # issues = [int(x) for x in message.text.replace(",", " ").split()]
    goals = [int(x) for x in message.text.replace(",", " ").split()]
    goal_descriptions = {
        1 : "–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
        2 :  "–ù–µ—Ä–æ–≤–Ω—ã–π —Ç–æ–Ω",
        3 : "–ê–∫–Ω–µ, –ø–æ—Å—Ç–∞–∫–Ω–µ",
        4 : "–†—É–±—Ü—ã –∏ —à—Ä–∞–º—ã",
        5 : "–ú–æ—Ä—â–∏–Ω—ã",
        6 : "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã",
        7 : "–û—Ç–∫—Ä—ã—Ç—ã–µ –∏/–∏–ª–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∫–æ–º–µ–¥–æ–Ω—ã",
        8 : "–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è",
        9 : "–°—É—Ö–æ—Å—Ç—å, —à–µ–ª—É—à–µ–Ω–∏–µ",
        10 : "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º",
    }
    goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
    await state.update_data(face_skin_issues=goal_texts)
    await state.set_state(QuestionnaireFace.skin_goals)
    await message.answer(
        "15) –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ—Å—Ç–∏—á—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ –ª–∏—Ü–∞? \n"
        "1 - –£–≤–ª–∞–∂–Ω—ë–Ω–Ω–∞—è –∏ –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞\n"
        "2 - –°–∏—è—é—â–∞—è —Å–≤–µ–∂–∞—è –∫–æ–∂–∞\n"
        "3 - –£–±—Ä–∞—Ç—å –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫\n"
        "4 - –ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ä\n"
        "5 - –£–±—Ä–∞—Ç—å —á—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏\n"
        "6 - –£–±—Ä–∞—Ç—å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–∫–Ω–µ\n"
        "7 - –£–±—Ä–∞—Ç—å –º–æ—Ä—â–∏–Ω—ã\n"
        "8 - –í—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–æ–Ω\n"
        "9 - –£–º–µ–Ω—å—à–∏—Ç—å \"–º–µ—à–∫–∏\" –∏ —Ç—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏\n"
        "10 - –°–Ω—è—Ç—å –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
        reply_markup=None
    )

@router.message(StateFilter(QuestionnaireFace.skin_goals))
async def process_face_skin_goals(message: types.Message, state: FSMContext):
    goals = [int(x) for x in message.text.replace(",", " ").split()]
    goal_descriptions = {
        1 : "–£–≤–ª–∞–∂–Ω—ë–Ω–Ω–∞—è –∏ –≥–ª–∞–¥–∫–∞—è –∫–æ–∂–∞",
        2 :  "–°–∏—è—é—â–∞—è —Å–≤–µ–∂–∞—è –∫–æ–∂–∞",
        3 : "–£–±—Ä–∞—Ç—å –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫",
        4 : "–ò–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ä",
        5 : "–£–±—Ä–∞—Ç—å —á—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏",
        6 : "–£–±—Ä–∞—Ç—å –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è –∏ –ø–æ—Å—Ç–∞–∫–Ω–µ",
        7 : "–£–±—Ä–∞—Ç—å –º–æ—Ä—â–∏–Ω—ã",
        8 : "–í—ã—Ä–æ–≤–Ω—è—Ç—å —Ç–æ–Ω",
        9 : "–£–º–µ–Ω—å—à–∏—Ç—å \"–º–µ—à–∫–∏\" –∏ —Ç—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏ –ø–æ–¥ –≥–ª–∞–∑–∞–º–∏",
        10 : "–°–Ω—è—Ç—å –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ",
    }
    goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
    await state.update_data(face_skin_goals=goal_texts)
    user_data = await state.get_data()
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢–∏–ø –∫–æ–∂–∏: {user_data['face_skin_type']}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['face_skin_condition']}\n"
        f"–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏: {', '.join(map(str, user_data['face_skin_issues']))}\n"
        f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['face_skin_goals']))}"
    )
    us_id = message.from_user.id

    user_face_data = {
                "face_skin_type": f"–¢–∏–ø –∫–æ–∂–∏: {user_data['face_skin_type']}",
                "face_skin_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['face_skin_condition']}",
                "face_skin_issues": f"–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏: {', '.join(map(str, user_data['face_skin_issues']))}",
                "face_skin_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['face_skin_goals']))}",
            }
    response = await send_user_data(us_id, user_face_data, "SetUserFaceData", "user_face_data")
    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

    full_sequence = user_data.get("full_sequence", False)
    if full_sequence:
        print(f"leaving_questionnaire with full_seq:{full_sequence}")
        await start_body_questionnaire(message.from_user.id, state)
    else:
        await state.clear()
        await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

@router.callback_query(StateFilter(QuestionnaireBody.body_skin_type), lambda c: True)
async def process_body_skin_type(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(body_skin_type=callback_query.data)
    await state.set_state(QuestionnaireBody.body_skin_sensitivity)
    await callback_query.message.edit_text("17) –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏ –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞?\n<i>–ù–∏–∂–µ –±—É–¥–µ—Ç –ø–∞–º—è—Ç–∫–∞</i>")
    await callback_query.message.answer(
        "<b>–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞</b> (–±–µ–∑ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏) \n- –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏ \n- –†–µ–¥–∫–æ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è, —à–µ–ª—É—à–µ–Ω–∏—è –∏–ª–∏ –∑—É–¥ \n- –•–æ—Ä–æ—à–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Ö–æ–¥–∞ \n\n<b>–£–º–µ—Ä–µ–Ω–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞</b> \n- –ò–Ω–æ–≥–¥–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∏–º–∞—Ç–∞, –∫–æ—Å–º–µ—Ç–∏–∫—É –∏–ª–∏ –º–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ \n- –í–æ–∑–º–æ–∂–Ω—ã –ª–µ–≥–∫–∏–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∑—É–¥ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ \n\n<b>–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞</b> \n- –ß–∞—Å—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å—É—Ö–æ–π –≤–æ–∑–¥—É—Ö, –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞, —Å–æ–ª–Ω—Ü–µ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞ \n- –ß–∞—Å—Ç–æ –æ—â—É—â–∞–µ—Ç—Å—è —Å—Ç—è–Ω—É—Ç–æ—Å—Ç—å, –∑—É–¥ –∏–ª–∏ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ \n\n<b>–û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞</b> \n- –†–µ–∞–≥–∏—Ä—É–µ—Ç –¥–∞–∂–µ –Ω–∞ –º—è–≥–∫–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª–∏, –≤–∫–ª—é—á–∞—è —Ç–∫–∞–Ω—å –æ–¥–µ–∂–¥—ã –∏–ª–∏ –≤–æ–¥—É \n- –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è, –∑—É–¥, —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è, —à–µ–ª—É—à–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Å—ã–ø–∞–Ω–∏—è \n- –¢—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É—Ö–æ–¥–∞ –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∞–ª–ª–µ—Ä–≥–µ–Ω–∞–º–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è", callback_data="sensitive")],
            [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞", callback_data="normal")],
            [InlineKeyboardButton(text="–£–º–µ—Ä–µ–Ω–Ω–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞", callback_data="mid_sensitive")],
            [InlineKeyboardButton(text="–û—á–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞", callback_data="very_sensitive")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireBody.body_skin_sensitivity), lambda c: True)
async def process_body_skin_sensitivity(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(body_skin_sensitivity=callback_query.data)
    await state.set_state(QuestionnaireBody.body_skin_condition)
    pre_message_map = {
        "sensitive": "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞ ‚Äî –∫–∞–∫ –Ω–µ–∂–Ω—ã–π —Ü–≤–µ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–π –∑–∞–±–æ—Ç—ã. –Ø —Å –≤–∞–º–∏ ‚Äî –±—É–¥—É –µ—ë –æ–±–µ—Ä–µ–≥–∞—Ç—å –∏ –ª–µ–ª–µ—è—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞–∑–∏ –∫—Ä–∞—Å–æ—Ç—ã! üå∏üíõ",
        "normal": "–ö–∞–∫–∞—è —É–¥–∞—á–∞! –í–∞—à–∞ –∫–æ–∂–∞ —Å–ª–æ–≤–Ω–æ –Ω–µ–ø—Ä–∏—Å—Ç—É–ø–Ω–∞—è –∫—Ä–µ–ø–æ—Å—Ç—å ‚Äî –Ω–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è, –Ω–∏ –∫–∞–ø—Ä–∏–∑–æ–≤. –ï–π –ø–æ–∑–∞–≤–∏–¥—É–µ—Ç –ª—é–±–æ–π –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥! ‚ú®üõ°Ô∏è",
        "mid_sensitive": "–ù–µ–º–Ω–æ–≥–æ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–∞–≤–¥–∞? –ù–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É—Ö–æ–¥–æ–º –≤–∞—à–∞ –∫–æ–∂–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ! üåøüòä",
        "very_sensitive": "–Ø –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ –±—ã–≤–∞–µ—Ç ‚Äî –∫–æ–∂–∞ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –¥–∞–∂–µ –Ω–∞ –º–∞–ª–µ–π—à–µ–µ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–µ. –ù–∏—á–µ–≥–æ, –º—ã –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥—ë–º —Å–∞–º—ã–µ –º—è–≥–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–¥–µ–∞–ª—å–Ω–æ. ü§≤üíï"
    }
    await callback_query.message.edit_text(pre_message_map[callback_query.data])
    await callback_query.message.answer(
        "18) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏ –Ω–∞ —Ç–µ–ª–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°—É—Ö–æ—Å—Ç—å –∏ —à–µ–ª—É—à–µ–Ω–∏–µ", callback_data="dryness")],
            [InlineKeyboardButton(text="–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏", callback_data="loss_of_elasticity")],
            [InlineKeyboardButton(text="–¶–µ–ª–ª—é–ª–∏—Ç", callback_data="cellulite")],
            [InlineKeyboardButton(text="–ê–∫–Ω–µ/–ø—Ä—ã—â–∏ –Ω–∞ —Ç–µ–ª–µ", callback_data="acne")],
            [InlineKeyboardButton(text="–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="pigmentation")],
            [InlineKeyboardButton(text="–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏—è", callback_data="redness")],
            [InlineKeyboardButton(text="–¢—Ä–µ—â–∏–Ω—ã –Ω–∞ –∫–æ–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –ø—è—Ç–∫–∞—Ö)", callback_data="cracks")],
            [InlineKeyboardButton(text="–ú–æ—Ä—â–∏–Ω—ã", callback_data="wrinkles")],
            [InlineKeyboardButton(text="–ù–µ—Ç –æ—Å–æ–±—ã—Ö –ø—Ä–æ–±–ª–µ–º", callback_data="no_problems")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireBody.body_skin_condition), lambda c: True)
async def process_body_skin_condition(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(body_skin_condition=callback_query.data)
    await state.set_state(QuestionnaireBody.body_hair_issues)
    await callback_query.message.edit_text(
        "19) –ó–∞–º–µ—á–∞–µ—Ç–µ –ª–∏ –≤—ã –∫–∞–∫–∏–µ-–ª–∏–±–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —É—Ö–æ–¥–æ–º –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –Ω–∞ —Ç–µ–ª–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ò–Ω–æ–≥–¥–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –≤—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã", callback_data="ingrown_hairs")],
            [InlineKeyboardButton(text="–†–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –±—Ä–∏—Ç—å—è", callback_data="irritation")],
            [InlineKeyboardButton(text="–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç", callback_data="no_problems")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireBody.body_hair_issues), lambda c: True)
async def process_body_hair_issues(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(body_hair_issues=callback_query.data)
    await state.set_state(QuestionnaireBody.body_attention_areas)
    pre_message_map = {
        "ingrown_hairs": "–ü–æ–Ω–∏–º–∞—é, —ç—Ç–æ —Ç–∞–∫ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ. –ú—ã –≤–º–µ—Å—Ç–µ –Ω–∞–π–¥–µ–º —Ä–µ—à–µ–Ω–∏–µ, –∫–∞–∫ —Å —ç—Ç–∏–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è! üçÉ",
        "irritation": "–ó–Ω–∞—é, —ç—Ç–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –æ–≥–æ—Ä—á–∞—Ç—å. –£ –º–µ–Ω—è –µ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±–æ–ª–µ–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º üíß",
        "no_problems": "–í—ã –ø—Ä–æ—Å—Ç–æ —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫! –ù–∏–∫–∞–∫–∏—Ö —Ö–ª–æ–ø–æ—Ç ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üåü"
    }
    await callback_query.message.edit_text(pre_message_map[callback_query.data])
    await callback_query.message.answer(
        "20) –ï—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–∫–∏ –Ω–∞ —Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è?\n–ù–∞–ø—Ä–∏–º–µ—Ä, –∑–æ–Ω—ã, –≥–¥–µ –∫–æ–∂–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —É—Å–∏–ª–µ–Ω–Ω–æ–º —É–≤–ª–∞–∂–Ω–µ–Ω–∏–∏ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∑–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ—â–∏–Ω–æ–∫.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–õ–æ–∫—Ç–∏", callback_data="elbows")],
            [InlineKeyboardButton(text="–ö–æ–ª–µ–Ω–∏", callback_data="knees")],
            [InlineKeyboardButton(text="–°–ø–∏–Ω–∞", callback_data="back")],
            [InlineKeyboardButton(text="–ü—è—Ç–∫–∏", callback_data="heels")],
            [InlineKeyboardButton(text="–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º", callback_data="no_problems")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireBody.body_attention_areas), lambda c: True)
async def process_body_attention_areas(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(body_attention_areas=callback_query.data)
    await state.set_state(QuestionnaireBody.body_goals)
    await callback_query.message.edit_text(
        "21) –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Ä–µ—à–∏—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏ —Ç–µ–ª–∞?\n"
        "1 - –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ\n"
        "2 - –ü–∏—Ç–∞–Ω–∏–µ\n"
        "3 - –°–º—è–≥—á–µ–Ω–∏–µ\n"
        "4 - –¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ\n"
        "5 - –û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ\n"
        "6 - –ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç\n"
        "7 - –û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∫–æ–∂–∏\n"
        "8 - –°–Ω—è—Ç–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–π\n"
        "9 - –ó–∞—â–∏—Ç–∞ –∫–æ–∂–∏\n"
        "10 - –ú–∞—Å—Å–∞–∂\n"
        "11 - –£–±—Ä–∞—Ç—å –≤—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã\n"
        "12 - –£–±—Ä–∞—Ç—å –∞–∫–Ω–µ\n"
        "–í—ã–±–∏—Ä–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –Ω–∞–ø–∏—à–∏ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º. \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: (1,4,6) –∏–ª–∏ (1 4 5)</i>",
        reply_markup=None
    )

@router.message(StateFilter(QuestionnaireBody.body_goals))
async def process_body_goals(message: types.Message, state: FSMContext):
    goals = [int(x) for x in message.text.replace(",", " ").split()]
    goal_descriptions = {
        1 : "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ",
        2 :  "–ü–∏—Ç–∞–Ω–∏–µ",
        3 : "–°–º—è–≥—á–µ–Ω–∏–µ",
        4 : "–¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
        5 : "–û—Ç—à–µ–ª—É—à–∏–≤–∞–Ω–∏–µ",
        6 : "–ê–Ω—Ç–∏—Ü–µ–ª–ª—é–ª–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç",
        7 : "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –∫–æ–∂–∏",
        8 : "–°–Ω—è—Ç–∏–µ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–π",
        9 : "–ó–∞—â–∏—Ç–∞ –∫–æ–∂–∏",
        10 : "–ú–∞—Å—Å–∞–∂",
        11 : "–£–±—Ä–∞—Ç—å –≤—Ä–æ—Å—à–∏–µ –≤–æ–ª–æ—Å—ã",
        12 : "–£–±—Ä–∞—Ç—å –∞–∫–Ω–µ",
        13 : "–ß—Ç–æ–±—ã —Å—Ä–µ–¥—Å—Ç–≤–æ –≤–∫—É—Å–Ω–æ –ø–∞—Ö–ª–æ",
    }
    goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
    await state.update_data(body_goals=goal_texts)
    user_data = await state.get_data()
    print(f"user: {message.from_user.id}, full_seq: {user_data.get("full_sequence")}")
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢–∏–ø –∫–æ–∂–∏ —Ç–µ–ª–∞: {user_data['body_skin_type']}\n"
        f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏: {user_data['body_skin_sensitivity']}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['body_skin_condition']}\n"
        f"–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–ª–æ—Å–∞–º–∏: {user_data['body_hair_issues']}\n"
        f"–£—á–∞—Å—Ç–∫–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏: {user_data['body_attention_areas']}\n"
        f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['body_goals']))}"
    )

    us_id = message.from_user.id

    user_body_data = {
                "body_skin_type": f"–¢–∏–ø –∫–æ–∂–∏ —Ç–µ–ª–∞: {user_data['body_skin_type']}",
                "body_skin_sensitivity": f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏: {user_data['body_skin_sensitivity']}",
                "body_skin_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏: {user_data['body_skin_condition']}",
                "body_hair_issues": f"–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ–ª–æ—Å–∞–º–∏: {user_data['body_hair_issues']}",
                "body_attention_areas": f"–£—á–∞—Å—Ç–∫–∏ —Å –æ—Å–æ–±—ã–º–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏: {user_data['body_attention_areas']}",
                "body_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['body_goals']))}",
            }

    response = await send_user_data(us_id, user_body_data, "SetUserBodyData", "user_body_data")
    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}")

    full_sequence = user_data.get("full_sequence", False)
    if full_sequence:
        await start_hair_questionnaire(message.from_user.id, state)
    else:
        await state.clear()
        await message.answer("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")

@router.callback_query(StateFilter(QuestionnaireHair.scalp_type), lambda c: True)
async def process_hair_scalp_type(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(hair_scalp_type=callback_query.data)
    await state.set_state(QuestionnaireHair.hair_thickness)
    await callback_query.message.edit_text(
        "23.1) –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Ç–æ–ª—â–∏–Ω—É –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å?\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ", callback_data="thin"),
             InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–µ", callback_data="medium"),
             InlineKeyboardButton(text="–ì—É—Å—Ç—ã–µ", callback_data="thick")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.hair_thickness), lambda c: True)
async def process_hair_thickness(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(hair_thickness=callback_query.data)
    await state.set_state(QuestionnaireHair.hair_length)
    await callback_query.message.edit_text(
        "23.2) –ö–∞–∫–æ–≤–∞ –¥–ª–∏–Ω–∞ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∏–µ", callback_data="short"),
             InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã", callback_data="medium"),
             InlineKeyboardButton(text="–î–ª–∏–Ω–Ω—ã–µ", callback_data="long")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.hair_length), lambda c: True)
async def process_hair_length(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(hair_length=callback_query.data)
    await state.set_state(QuestionnaireHair.hair_structure)
    await callback_query.message.edit_text(
        "23.3) –ö–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü—Ä—è–º—ã–µ", callback_data="straight"),
             InlineKeyboardButton(text="–í–æ–ª–Ω–∏—Å—Ç—ã–µ", callback_data="wavy"),
             InlineKeyboardButton(text="–ö—É–¥—Ä—è–≤—ã–µ", callback_data="curly")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.hair_structure), lambda c: True)
async def process_hair_structure(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(hair_structure=callback_query.data)
    await state.set_state(QuestionnaireHair.hair_condition)
    await callback_query.message.edit_text(
        "23.4) –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–∞—à–∏ –≤–æ–ª–æ—Å—ã?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º)", callback_data="damaged"),
             InlineKeyboardButton(text="–õ–æ–º–∫–∏–µ", callback_data="brittle")],
            [InlineKeyboardButton(text="–°–µ–∫—É—â–∏–µ—Å—è –∫–æ–Ω—á–∏–∫–∏", callback_data="split_ends"),
             InlineKeyboardButton(text="–ó–¥–æ—Ä–æ–≤—ã–µ", callback_data="healthy")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.hair_condition), lambda c: True)
async def process_hair_condition(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(hair_condition=callback_query.data)
    await state.set_state(QuestionnaireHair.hair_goals)
    await callback_query.message.edit_text(
        "24) –ö–∞–∫–∏–µ —Ü–µ–ª–∏ —É—Ö–æ–¥–∞ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω—ã? –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤\n"
        "1 - –ö–æ–Ω—Ç—Ä–æ–ª—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã\n"
        "2 - –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ –≤–æ–ª–æ—Å\n"
        "3 - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ—Å\n"
        "4 - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Ö–æ—Ç–∏\n"
        "5 - –ó–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ—Ä–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è (—Ñ–µ–Ω, –ø–ª–æ–π–∫–∞, —É—Ç—é–∂–æ–∫)\n"
        "6 - –£—Å–∏–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å\n"
        "7 - –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è\n"
        "8 - –ë–ª–µ—Å–∫ –∏ –≥–ª–∞–¥–∫–æ—Å—Ç—å"
        "9 - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –∏ –ª—ë–≥–∫–æ—Å—Ç–∏"
        "10 - –ë–æ—Ä—å–±–∞ —Å —Å–µ–∫—É—â–∏–º–∏—Å—è –∫–æ–Ω—á–∏–∫–∞–º–∏"
        "11 - –õ–µ–≥–∫–æ—Å—Ç—å —Ä–∞—Å—á—ë—Å—ã–≤–∞–Ω–∏—è –∏ —É–∫–ª–∞–¥–∫–∏",
        reply_markup=None
    )

@router.message(StateFilter(QuestionnaireHair.hair_goals))
async def process_hair_goals(message: types.Message, state: FSMContext):
    goals = [int(x) for x in message.text.replace(",", " ").split()]
    goal_descriptions = {
        1 : "–ö–æ–Ω—Ç—Ä–æ–ª—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã",
        2 : "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–∏—Ç–∞–Ω–∏–µ –≤–æ–ª–æ—Å",
        3 : "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –≤–æ–ª–æ—Å",
        4 : "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä—Ö–æ—Ç–∏",
        5 : "–ó–∞—â–∏—Ç–∞ –æ—Ç —Ç–µ—Ä–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è (—Ñ–µ–Ω, –ø–ª–æ–π–∫–∞, —É—Ç—é–∂–æ–∫)",
        6 : "–£—Å–∏–ª–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å",
        7 : "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –≤—ã–ø–∞–¥–µ–Ω–∏—è",
        8 : "–ë–ª–µ—Å–∫ –∏ –≥–ª–∞–¥–∫–æ—Å—Ç—å",
        9 : "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –∏ –ª—ë–≥–∫–æ—Å—Ç–∏",
        10 : "–ë–æ—Ä—å–±–∞ —Å —Å–µ–∫—É—â–∏–º–∏—Å—è –∫–æ–Ω—á–∏–∫–∞–º–∏",
        11 : "–õ–µ–≥–∫–æ—Å—Ç—å —Ä–∞—Å—á—ë—Å—ã–≤–∞–Ω–∏—è –∏ —É–∫–ª–∞–¥–∫–∏",
    }
    goal_texts = [goal_descriptions[goal] for goal in goals if goal in goal_descriptions]
    await state.update_data(hair_goals=goal_texts)
    await state.set_state(QuestionnaireHair.washing_frequency)
    await message.answer(
        "25) –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –º–æ–µ—Ç–µ –≥–æ–ª–æ–≤—É?  \n<i>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —É—Ö–æ–¥–∞:</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="daily"),
             InlineKeyboardButton(text="–ö–∞–∂–¥—ã–µ 2 –¥–Ω—è", callback_data="every_2_days")],
            [InlineKeyboardButton(text="2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", callback_data="twice_weekly"),
             InlineKeyboardButton(text="1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="once_weekly")]
        ])
    )

@router.callback_query(StateFilter(QuestionnaireHair.washing_frequency), lambda c: True)
async def process_washing_frequency(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(washing_frequency=callback_query.data)
    await state.set_state(QuestionnaireHair.current_products)
    await callback_query.message.edit_text(
        "26) –ö–∞–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ —Å–µ–π—á–∞—Å?  \n<i>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–®–∞–º–ø—É–Ω—å", callback_data="shampoo"),
             InlineKeyboardButton(text="–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä", callback_data="conditioner")],
            [InlineKeyboardButton(text="–ú–∞—Å–∫–∞", callback_data="mask"),
             InlineKeyboardButton(text="–ù–µ—Å–º—ã–≤–∞–µ–º—ã–π —É—Ö–æ–¥ (–º–∞—Å–ª–∞, —Å—ã–≤–æ—Ä–æ—Ç–∫–∏, —Å–ø—Ä–µ–∏)", callback_data="leave_in_care")],
            [InlineKeyboardButton(text="–°–∫—Ä–∞–± –∏–ª–∏ –ø–∏–ª–∏–Ω–≥ –¥–ª—è –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã", callback_data="scrub")],
            [InlineKeyboardButton(text="–¢–æ–Ω–∏–∫–∏ –∏–ª–∏ —Å–ø—Ä–µ–∏ –¥–ª—è —Ä–æ—Å—Ç–∞", callback_data="tonic")],
            [InlineKeyboardButton(text="–£–∫–ª–∞–¥–æ—á–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ (–≥–µ–ª–∏, –ø–µ–Ω–∫–∏, –ª–∞–∫–∏)", callback_data="styling")],
            [InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ", callback_data="nothing")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.current_products), lambda c: True)
async def process_current_products(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(current_products=callback_query.data)
    await state.set_state(QuestionnaireHair.product_texture)
    await callback_query.message.edit_text(
        "27) –ö–∞–∫—É—é —Ç–µ–∫—Å—Ç—É—Ä—É —É—Ö–æ–¥–∞ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–õ–µ–≥–∫–∏–µ —Å–ø—Ä–µ–∏ –∏–ª–∏ —Ç–æ–Ω–∏–∫–∏", callback_data="light"),
             InlineKeyboardButton(text="–ö—Ä–µ–º–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã", callback_data="cream")],
            [InlineKeyboardButton(text="–ü–ª–æ—Ç–Ω—ã–µ –º–∞—Å–ª–∞ –∏–ª–∏ –±–∞–ª—å–∑–∞–º—ã", callback_data="dense"),
             InlineKeyboardButton(text="–ì–µ–ª–µ–≤—ã–µ –∏–ª–∏ —Å—ã–≤–æ—Ä–æ—Ç–æ—á–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã", callback_data="gel")],
             [InlineKeyboardButton(text="–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç", callback_data="any")],
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.product_texture), lambda c: True)
async def process_product_texture(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(product_texture=callback_query.data)
    await state.set_state(QuestionnaireHair.sensitivity)
    pre_message_map = {
        "light": "–ü–æ–Ω–∏–º–∞—é –≤–∞—Å! –¢–æ–∂–µ –æ–±–æ–∂–∞—é —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª–µ–¥–æ–≤ –∏ –æ—â—É—â–µ–Ω–∏–µ –ª–∏–ø–∫–æ—Å—Ç–∏ üôè",
        "cream": "–ü—Ä–∏—è—Ç–Ω—ã–π –≤—ã–±–æ—Ä! –ö—Ä–µ–º–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –≤—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—é—Ç –æ—â—É—â–µ–Ω–∏–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –∑–∞–±–æ—Ç—ã ü´∂",
        "dense": "–û, –≤—ã –∏–∑ —Ç–µ—Ö, –∫—Ç–æ –ª—é–±–∏—Ç –≥–ª—É–±–æ–∫–∏–π —É—Ö–æ–¥! –ú–∞—Å–ª–∞ –∏ –±–∞–ª—å–∑–∞–º—ã ‚Äî —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –Ω–∞—Ö–æ–¥–∫–∞ –¥–ª—è –ø–∏—Ç–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è üåü",
        "gel": "–¢–∞–∫ —Å–≤–µ–∂–æ –∏ –Ω–µ–≤–µ—Å–æ–º–æ! –ì–µ–ª–∏ –∏ —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ª–µ–≥–∫–æ—Å—Ç–∏ –≤ —É—Ö–æ–¥–µ üíß",
        "any": "–ö–∞–∫–æ–π –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–æ–±–∏—Ç—å—Å—è —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—Å—Ç—É—Ä—ã üíº"
    }
    await callback_query.message.edit_text(pre_message_map[callback_query.data])
    await callback_query.message.answer(
        "28) –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏—è –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ –∫–∞–∫–∏–º-–ª–∏–±–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–∂—É –≥–æ–ª–æ–≤—ã?  \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—É–ª—å—Ñ–∞—Ç—ã, —ç—Ñ–∏—Ä–Ω—ã–µ –º–∞—Å–ª–∞, –∞—Ä–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞.</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="yes"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.sensitivity), lambda c: True)
async def process_sensitivity(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(sensitivity=callback_query.data)
    await state.set_state(QuestionnaireHair.styling_tools)
    await callback_query.message.edit_text(
        "29) –ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã —Ç–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã?  \n<i>–ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ–µ–Ω, —É—Ç—é–∂–æ–∫, –ø–ª–æ–π–∫—É –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–∫–ª–∞–¥–∫–∏.</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, —á–∞—Å—Ç–æ", callback_data="often"),
             InlineKeyboardButton(text="–ò–Ω–æ–≥–¥–∞", callback_data="sometimes"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="never")]
        ])
    )
    await callback_query.answer()

@router.callback_query(StateFilter(QuestionnaireHair.styling_tools), lambda c: True)
async def process_styling_tools(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(styling_tools=callback_query.data)
    user_data = await state.get_data()
    await callback_query.message.edit_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–¢–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã: {user_data['hair_scalp_type']}\n"
        f"–¢–æ–ª—â–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_thickness']}\n"
        f"–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_length']}\n"
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ª–æ—Å: {user_data['hair_structure']}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å: {user_data['hair_condition']}\n"
        f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['hair_goals']))}\n"
        f"–ß–∞—Å—Ç–æ—Ç–∞ –º—ã—Ç—å—è –≥–æ–ª–æ–≤—ã: {user_data['washing_frequency']}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {user_data['current_products']}\n"
        f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞: {user_data['product_texture']}\n"
        f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['sensitivity']}\n"
        f"–¢–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã: {user_data['styling_tools']}"
    )

    us_id = callback_query.from_user.id

    user_hair_data = {
                "hair_scalp_type": f"–¢–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã: {user_data['hair_scalp_type']}",
                "hair_thickness": f"–¢–æ–ª—â–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_thickness']}",
                "hair_length": f"–î–ª–∏–Ω–∞ –≤–æ–ª–æ—Å: {user_data['hair_length']}",
                "hair_structure": f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ª–æ—Å: {user_data['hair_structure']}",
                "hair_condition": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–ª–æ—Å: {user_data['hair_condition']}",
                "hair_goals": f"–¶–µ–ª–∏ —É—Ö–æ–¥–∞: {', '.join(map(str, user_data['hair_goals']))}",
                "washing_frequency": f"–ß–∞—Å—Ç–æ—Ç–∞ –º—ã—Ç—å—è –≥–æ–ª–æ–≤—ã: {user_data['washing_frequency']}",
                "current_products": f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞: {user_data['current_products']}",
                "product_texture": f"–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞: {user_data['product_texture']}",
                "sensitivity": f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {user_data['sensitivity']}",
                "styling_tools": f"–¢–µ—Ä–º–æ—É–∫–ª–∞–¥–æ—á–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã: {user_data['styling_tools']}",
            }
    response = await send_user_data(us_id, user_hair_data, "SetUserHairData", "user_hair_data")
    buttons = [
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")]
    ]
    await callback_query.message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ: {response}", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await bot.send_message(us_id, 
                           "–£—Ä–∞, –º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏!  –¢–µ–ø–µ—Ä—å —è —Å–æ–±–µ—Ä—É –≤–æ–µ–¥–∏–Ω–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–≤–µ–¥—É –∏–¥–µ–∞–ª—å–Ω—ã–π –±—å—é—Ç–∏-–ø–æ—Ä—Ç—Ä–µ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏     –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã! ü™¥"
                           )
    user_data = await state.get_data()

    await bot.send_message(us_id,f"<b>–ê –≤–æ—Ç –∏ –≤–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç –êvocadÔªøo Bot:</b>   \n\nüë∂ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} \n‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–µ–Ω—ã: {user_data['allergy']}   \n\nüçì <b>–ö–æ–∂–∞ –ª–∏—Ü–∞ {user_data['face_skin_type']}</b>  \—Ç\—Ç–í–∞—à–∞ —Ü–µ–ª—å: {', '.join(map(str, user_data['face_skin_goals']))}  \n\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å—Ä–µ–¥—Å—Ç–≤–∞): —Ç–∏–ø —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∑–∞ —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —Ü–µ–ª–∏, —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–µ–∑ –º–∞—Ä–æ–∫ –∏ –±—Ä–µ–Ω–¥–æ–≤)   \n\n<b>ü•≠ –ö–æ–∂–∞ —Ç–µ–ª–∞ {user_data['body_skin_type']}</b>   \n\n–í–∞—à–∞ —Ü–µ–ª—å: {', '.join(map(str, user_data['body_goals']))}   \n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å—Ä–µ–¥—Å—Ç–≤–∞): —Ç–∏–ø —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∑–∞ —á—Ç–æ –æ—ÇÔªø–≤–µ—á–∞—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —Ü–µ–ª–∏, —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–µ–∑ –º–∞—Ä–æ–∫ –∏ –±—Ä–µ–Ω–¥–æ–≤) \n\nüçä<b>–ì–æ–ª–æ–≤–∞ –∏ –≤–æ–ª–æ—Å {user_data['hair_scalp_type']}</b>   \n\n–í–∞—à–∞ —Ü–µ–ª—å: {', '.join(map(str, user_data['hair_goals']))}   \n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 2 —Å—Ä–µ–¥—Å—Ç–≤–∞): —Ç–∏–ø —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, –∑–∞ —á—Ç–æ –æ—ÇÔªø–≤–µ—á–∞—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —Ü–µ–ª–∏, —á–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–±–µ–∑ –º–∞—Ä–æ–∫ –∏ –±—Ä–µ–Ω–¥–æ–≤)")
    await bot.send_message(us_id,"–ù—É –∫–∞–∫, –≤—Å—ë –ª–∏ –ø–æ–Ω—è—Ç–Ω–æ? ü•ë  \n–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —è –º–æ–≥—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è —É–º–µ—é, –∫–∞–∫ –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∫–∞–∫–∏–µ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç–µ. üßñ‚Äç‚ôÄÔ∏è    \nAvocado –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤—Å–µ–º–∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏ –∫—Ä–∞—Å–æ—Ç—ã –∏ —É—Ö–æ–¥–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å!")
    await process_about_avocado(callback_query, state)


async def process_about_avocado(callback_query: CallbackQuery, state: FSMContext):
    img1="AgACAgIAAxkBAAILOWfElQUBkr7wkvwOFKsRCZbP6g9xAAI18jEbxbQpSlRffZUDlbBjAQADAgADeQADNgQ"
    img2="AgACAgIAAxkBAAILPGfElRBs6AL6-zGh1OYBKuGT84LyAAI28jEbxbQpSgvtn0qE0goLAQADAgADeQADNgQ"
    img3="AgACAgIAAxkBAAILTWfElwltoleIVbfsQNhgPnh3K-TYAAJO8jEbxbQpSn8pvsmUlUdlAQADAgADeQADNgQ"
    img4="AgACAgIAAxkBAAILUGfElw1nqa4PW3WbNY6pCWyCdgyUAAJP8jEbxbQpSrTAXNtG-L3TAQADAgADeQADNgQ"
    img5="AgACAgIAAxkBAAILU2fElxA8Rs_Ugtle716x6kbpNhhpAAJQ8jEbxbQpSoleyT3KJGehAQADAgADeQADNgQ"
    img6="AgACAgIAAxkBAAILVmfElxM3vQXqzQv2zjrhtxT2AAH8pQACUfIxG8W0KUpzZ_hkpHHzqgEAAwIAA3kAAzYE"
    media_files = [
        InputMediaPhoto(media=img1),
        InputMediaPhoto(media=img2),
        InputMediaPhoto(media=img3),
        InputMediaPhoto(media=img4),
        InputMediaPhoto(media=img5),
        InputMediaPhoto(media=img6)
    ]
    await callback_query.message.answer_media_group(media=media_files)
    await callback_query.message.answer(
        "–í–æ—Ç –∏ –≤—Å–µ –ø–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å! –° —á–µ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞", callback_data="analysis"), InlineKeyboardButton(text="–°–ø—Ä–æ—Å–∏—Ç—å Avocado Bot ‚ùî", callback_data="setstate_yapp")]
        ])
    )
    await state.clear()


@router.message(StateFilter(UserState.yapp))
async def yapp_handler(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    us_id = str(message.from_user.id)
    chat_id = message.chat.id
    sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
    await remove_thread(us_id)
    buttons = [
        [InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data="menu")],
    ]
    if message.text:
        response_1 = await generate_response(message.text, us_id, YAPP_ASS)
        response = remove_tags(response_1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(f"{response}\n\n –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    elif message.voice:
        trainscription = await audio_file(message.voice.file_id)
        await message.answer(trainscription)
        response_1 = await generate_response(trainscription, us_id, YAPP_ASS)
        response = remove_tags(response_1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(f"{response}\n\n –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    elif message.photo:
        file = await bot.get_file(message.photo[-1].file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
        url_response_1 = await process_url(file_url, us_id, YAPP_ASS)
        url_response = remove_tags(url_response_1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(f"{url_response}\n\n –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


@router.message(StateFilter(UserState.yapp_with_xtra))
async def yapp_handler(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    pers_analysis = user_data['pers_analysis']
    us_id = str(message.from_user.id)
    chat_id = message.chat.id
    sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
    await remove_thread(us_id)
    if message.text:
        response_1 = await generate_response(f"–ü—Ä–æ—à–ª—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞: {pers_analysis}, –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text} ", us_id, YAPP_ASS)
        response = remove_tags(response_1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(response)
    elif message.voice:
        trainscription = await audio_file(message.voice.file_id)
        await message.answer(trainscription)
        response_1 = await generate_response(f"–ü—Ä–æ—à–ª—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞: {pers_analysis}, –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {trainscription}", us_id, YAPP_ASS)
        response = remove_tags(response_1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(response)
    elif message.photo:
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –≥–æ–ª–æ—Å–æ–º")
        # file = await bot.get_file(message.photo[-1].file_id)
        # file_path = file.file_path
        # file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
        # url_response_1 = await process_url(file_url, us_id, YAPP_ASS)
        # url_response = remove_tags(url_response_1)
        # await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        # await message.answer(url_response)

@router.message(StateFilter(UserState.recognition))
async def recognition_handler(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    product_type = user_data.get("product_type")
    us_id = str(message.from_user.id)
    chat_id = message.chat.id
    if message.text:

        sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
        med_name = await generate_response(message.text, us_id, ASSISTANT_ID)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)


        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

        sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = [[InlineKeyboardButton(text="–í—Å–µ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"analysis")],]
            # product_messages = []
            # for product in extracted_list:
            for product in extracted_list[:5]:
                # product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            # combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            # await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
                ]
            )
            await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
    elif message.voice:

        transcribed_text = await audio_file(message.voice.file_id)
        sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))

        med_name = await generate_response(transcribed_text, us_id, ASSISTANT_ID)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

        sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        # response = await remove_json_block(response1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

        # await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = []
            product_messages = []
            for product in extracted_list:
                product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
                ]
            )
            await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
    elif message.photo:

        file = await bot.get_file(message.photo[-1].file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"

        sticker_message = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
        med_name = await process_url(file_url, us_id, ASSISTANT_ID)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")

        sticker_message1 = await bot.send_sticker(chat_id=chat_id, sticker=random.choice(STICKERLIST))
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        # response = await remove_json_block(response1)
        await bot.delete_message(chat_id=chat_id, message_id=sticker_message1.message_id)

        # await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = []
            product_messages = []
            for product in extracted_list:
                product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="analysis")]
                ]
            )
            await message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç!  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!  üåü", reply_markup=keyboard)
    else:
        await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ñ–æ—Ç–æ")

@router.callback_query(lambda c: c.data == 'analysis')
async def process_analysis_cb(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    text = "–î–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω–∏–º, –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –±–∞–Ω–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å?"
    buttons = [
        [InlineKeyboardButton(text="–î–ª—è –ª–∏—Ü–∞", callback_data="product_type_face")],
        [InlineKeyboardButton(text="–î–ª—è —Ç–µ–ª–∞ –∏ —Ä—É–∫", callback_data="product_type_body")],
        [InlineKeyboardButton(text="–î–ª—è –≤–æ–ª–æ—Å –∏ –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã", callback_data="product_type_hair")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback_query.message.edit_text(text, reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('product_type_'))
async def process_product_type(callback_query: CallbackQuery, state: FSMContext):
    product_type = callback_query.data.split('_')[2]  # Extracts 'face' or 'body'
    await state.update_data(product_type=product_type)
    us_id = callback_query.from_user.id
    text = "–°–∫–∏–Ω—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ üì∏ –∏–ª–∏ <u>—Å—Å—ã–ª–∫—É</u> –Ω–∞ —Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.  –Ø –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º —á–µ—Å—Ç–Ω—É—é –æ—Ü–µ–Ω–∫—É! \n<i>–ú–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å Ô∏è –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç–æ–≤–∞—Ç—å Ô∏è –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äî –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ. –í–∞—à –≤—ã–±–æ—Ä –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è Avocado bot </i> ü•ë"
    await state.set_state(UserState.recognition)
    await callback_query.message.edit_text(text)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == 'questionaire2')
async def process_questionaire2(callback_query: CallbackQuery, state: FSMContext):
    current_data = await state.get_data()
    if not current_data.get("full_sequence", True):
        await state.update_data(full_sequence=False)
    us_id = callback_query.from_user.id
    text = ( 
        "–•–æ–ª–∏ –ì—É–∞–∫–∞–º–æ–ª–µ! üòä\n–Ø ‚Äî Avocado Bot, –≤–∞—à –∫–∞—Ä–º–∞–Ω–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –≤ –º–∏—Ä–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏. –ê –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"
    )

    await callback_query.message.edit_text(text)
    await state.set_state(Questionnaire.name)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'setstate_yapp')
async def process_setstate_yapp(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.yapp)
    await callback_query.answer("yapp_state_set")
    text = "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Ö–æ–¥–µ? \n–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! \n–ù–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Ç–µ–∫—Å—Ç–æ–º ‚úèÔ∏è –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§.\n\n   –ù–∞–ø—Ä–∏–º–µ—Ä: <i>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—ã–≤–æ—Ä–æ—Ç–∫—É —Å —Ä–µ—Ç–∏–Ω–æ–ª–æ–º?</i> –∏–ª–∏ <i>–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–µ–º —Å –º–æ—á–µ–≤–∏–Ω–æ–π –¥–ª—è —Ä—É–∫ ‚Äì –Ω–∞ —Ç–µ–ª–æ?</i>\n –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! ü•ë"
    await callback_query.message.answer(text)

@router.callback_query(lambda c: c.data == 'yapp_with_extra_info')
async def process_yapp_with_extra_info(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.yapp_with_xtra)
    await callback_query.answer("yapp_with_xtra")

@router.callback_query(lambda c: c.data == 'settings')
async def process_settings(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    buttons = [
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é Avocado Bot üîñ", callback_data="explain_4")],
        [InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É üìñ", callback_data="settings_questionaire")],
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="settings_sub")],
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'explain_4')
async def process_re_sub(callback_query: CallbackQuery, state: FSMContext):
    text = "–î–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∂—É, —á—Ç–æ —è —É–º–µ—é üôå"
    await callback_query.message.answer(text)
    await process_about_avocado(callback_query, state)

@router.callback_query(lambda c: c.data == 'settings_sub')
async def process_sub_sett(callback_query: CallbackQuery, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="re_sub")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="un_sub")],
        [InlineKeyboardButton(text=arrow_back, callback_data="settings"),InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–í–∞—à —Ç–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: X   \n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –î–ê–¢–ê, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å \n\n<i>–û–∂–∏–¥–∞–µ—Ç –º–µ—Ç–æ–¥–∞ –¥–ª—è –∏–Ω—Ñ—ã </i>"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 're_sub')
async def process_re_sub(callback_query: CallbackQuery, state: FSMContext):
    text = "–ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –Ω–∞ –ª–µ–Ω–¥–∏–Ω–≥ / —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –≤ –¢–ì"
    buttons = [
        [InlineKeyboardButton(text=arrow_back, callback_data="settings_sub"),InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    await callback_query.message.answer(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(lambda c: c.data == 'un_sub')
async def process_un_sub(callback_query: CallbackQuery, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="–î–∞", callback_data="un_sub_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —è –æ—Å—Ç–∞—é—Å—å", callback_data="un_sub_no")],
        [InlineKeyboardButton(text=arrow_back, callback_data="settings_sub"),InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã? Avocado Bot –≤—Å–µ–≥–¥–∞ –≤–∞—Å –∂–¥—ë—Ç üíö"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'settings_questionaire')
async def process_re_quest(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    buttons = [
        [InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ ü™¥", callback_data="all_questionnaires")],
        [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è üå±", callback_data="questionnaires_pick")],
        [InlineKeyboardButton(text=arrow_back, callback_data="settings"),InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–•–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞?"
    await callback_query.message.edit_text(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'un_sub_yes')
async def process_un_sub_yes(callback_query: CallbackQuery, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    await callback_query.message.edit_text("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å–∫–æ—Ä–µ–µ üíö", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

@router.callback_query(lambda c: c.data == 'un_sub_no')
async def process_un_sub_no(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–êvocado –æ—á–µ–Ω—å —Ä–∞–¥–æ! ü•∞")

@router.callback_query(lambda c: c.data == 'questionnaires_pick')
async def process_re_quest_pick(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    us_data = await get_user_data(us_id)
    await callback_query.message.answer(f"{us_data}")
    buttons = [
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–û–±—â–µ–µ", callback_data="questionaire2")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–õ–∏—Ü–æ", callback_data="questionnaire_face")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–¢–µ–ª–æ", callback_data="questionnaire_body")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–í–æ–ª–æ—Å—ã", callback_data="questionnaire_hair")],
        [InlineKeyboardButton(text=arrow_back, callback_data="settings_questionaire"),InlineKeyboardButton(text=arrow_menu, callback_data="menu")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∫–µ—Ç—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª ‚Äî –∏ –≤—É–∞–ª—è, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è!"
    await callback_query.message.answer(text, reply_markup=keyboard)

@router.callback_query(lambda c: c.data == 'questionnaire_face')
async def process_questionnaire_face(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.info_coll)
    current_data = await state.get_data()
    user_id = callback_query.from_user.id
    await state.set_state(QuestionnaireFace.skin_type)
    if not current_data.get("full_sequence", True):
        await state.update_data(full_sequence=False)
    print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
    await callback_query.message.answer(
        "<b>–ß–∞—Å—Ç—å 2/4</b> üü¢üü¢‚ö™Ô∏è‚ö™Ô∏è \n<b>4 –≤–æ–ø—Ä–æ—Å–∞ –æ –≤–∞—à–µ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –ª–∏—Ü–µ</b> \n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ‚Äî –¥–∞–≤–∞–π—Ç–µ –±–ª–∏–∂–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è —Å –≤–∞—à–µ–π –∫–æ–∂–µ–π. ¬†üôå \n\n–ï—Å–ª–∏ –±—É–¥–µ—Ç —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–±–æ–ª—å—à–∞—è —à–ø–∞—Ä–≥–∞–ª–∫–∞: –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–∂–∏, –ø–æ–¥–æ–π–¥–∏—Ç–µ –∫ –∑–µ—Ä–∫–∞–ª—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å. –í—Å—ë –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª —É—Ö–æ–¥–∞! üåø"
        )
    await callback_query.message.answer(
        "12) –ö–∞–∫–æ–π —Ç–∏–ø –∫–æ–∂–∏ —É –≤–∞—Å –Ω–∞ –ª–∏—Ü–µ? \n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å, –ø–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ –≤–∞—à–∞ –∫–æ–∂–∞ –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! üåø",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
             InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
            [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
             InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")]
        ])
    )
    await callback_query.answer()



async def start_body_questionnaire(user_id: int, state: FSMContext):
    current_data = await state.get_data()
    full_sequence = current_data.get("full_sequence", False)
    print(f"user: {user_id}, full_seq: {full_sequence}")
    await state.set_state(QuestionnaireBody.body_skin_type)
    if not current_data.get("full_sequence", True):
        await state.update_data(full_sequence=False)
    print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
    await bot.send_message(
        user_id,
        "<b>–ß–∞—Å—Ç—å 3/4 üü¢üü¢üü¢‚ö™Ô∏è \n6 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º —Ç–µ–ª–µ</b> \n\n–° –ª–∏—Ü–æ–º –º—ã —Ä–∞–∑–æ–±—Ä–∞–ª–∏—Å—å ‚Äî –≤—ã –ø—Ä–æ—Å—Ç–æ –º–æ–ª–æ–¥–µ—Ü!  üí™–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —Å–∞–º–æ–π \"–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π\" —á–∞—Å—Ç–∏ ‚Äî –≤–∞—à–µ–º —Ç–µ–ª–µ. –ó–¥–µ—Å—å –≤—Å–µ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–æ. üòâ"
    )
    await bot.send_message(
        user_id,
        "16) –ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ —Ç–∏–ø –∫–æ–∂–∏ –≤–∞—à–µ–≥–æ —Ç–µ–ª–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
             InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
            [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
             InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")]
        ])
    )

@router.callback_query(lambda c: c.data == 'questionnaire_body')
async def process_questionnaire_body(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.info_coll)
    await state.update_data(full_sequence=False)
    await start_body_questionnaire(callback_query.from_user.id, state)
    await callback_query.answer()


async def start_hair_questionnaire(user_id: int, state: FSMContext):
    current_data = await state.get_data()
    await state.set_state(QuestionnaireHair.scalp_type)
    if not current_data.get("full_sequence", False):
        await state.update_data(full_sequence=False)
    print(f"user: {user_id}, full_seq: {current_data.get("full_sequence")}")
    await bot.send_message(
        user_id,
        "<b>–ß–∞—Å—Ç—å 4/4 üü¢üü¢üü¢üü¢ \n8 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–æ–ª–æ—Å–∞—Ö –∏ –∫–æ–∂–µ –≥–æ–ª–æ–≤—ã</b> üíÜ‚Äç‚ôÄÔ∏è \n8 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å–∞—Ö –∏ –∫–æ–∂–µ –≥–æ–ª–æ–≤—ã‚ôÄÔ∏è ‚Äç‚ôÄÔ∏è \n–°–æ–≤—Å–µ–º —á—É—Ç—å-—á—É—Ç—å –æ—Å—Ç–∞–ª–æ—Å—å! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ –≤–∞—à–∏—Ö –≤–æ–ª–æ—Å–∞—Ö ‚Äî —Ä–∞—Å–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–∏ –ª–æ–∫–æ–Ω—ã, –†–∞–ø—É–Ω—Ü–µ–ª—å, –º—ã –≥–æ—Ç–æ–≤—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∏—Ö –≤—Å—ë. \n–í—Å–µ–≥–æ 8 –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ –º—ã –Ω–∞ —Ñ–∏–Ω–∏—à–Ω–æ–π –ø—Ä—è–º–æ–π! üòä"
    )
    await bot.send_message(
        user_id,
        "22) –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∫–æ–∂–∏ –≥–æ–ª–æ–≤—ã?\n<i>–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –∫–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø, –≤–æ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏</i>\n\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –æ—â—É—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—ã—á–Ω–æ–≥–æ —É—Ö–æ–¥–∞ –∑–∞ –≤–æ–ª–æ—Å–∞–º–∏ –∏–ª–∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ —á–∞—Å—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –º—ã—Ç—å –≥–æ–ª–æ–≤—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", callback_data="normal"),
             InlineKeyboardButton(text="–°—É—Ö–∞—è", callback_data="dry")],
            [InlineKeyboardButton(text="–ñ–∏—Ä–Ω–∞—è", callback_data="oily"),
             InlineKeyboardButton(text="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", callback_data="combination")]
        ])
    )


@router.callback_query(lambda c: c.data == 'questionnaire_hair')
async def process_questionnaire_hair(callback_query: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.info_coll)
    current_data = await state.get_data()
    if not current_data.get("full_sequence", False):
        await state.update_data(full_sequence=False)
    await start_hair_questionnaire(callback_query.from_user.id, state)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'all_questionnaires')
async def process_all_questionnaires(callback_query: CallbackQuery, state: FSMContext):
    current_data = await state.get_data()
    print(f"Updated state in process_all_questionnaires: {current_data}")
    await state.set_state(UserState.info_coll)
    await state.update_data(full_sequence=True)
    await process_questionaire2(callback_query, state)

@router.callback_query(lambda c: c.data.startswith('item_'))
async def process_item(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    analysis_type = parts[1]
    item_id = parts[2]

    analysis_matrix = {
        'face': ANALYSIS_G_FACE_ASS,
        'body': ANALYSIS_G_BODY_ASS,
        'hair': ANALYSIS_G_HAIR_ASS,
    }

    analysis_var = analysis_matrix.get(analysis_type)
    print(f"analysing using {analysis_var}")

    if not analysis_var:
        await callback_query.answer("Invalid analysis type.", show_alert=True)
        return

    chat_id = callback_query.message.chat.id
    us_id = callback_query.from_user.id

    buttons = [
        InlineKeyboardButton(text="–î–∞, —Ö–æ—á—É üìä", callback_data=f'personal_{analysis_type}_{item_id}'),
        InlineKeyboardButton(text="–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", callback_data='analysis')
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])


    sticker_message = await bot.send_sticker(chat_id=callback_query.message.chat.id, sticker=random.choice(STICKERLIST))
    db_info = await fetch_product_details(item_id)
    analysis_result1 = await no_thread_ass(str(db_info), analysis_var)
    analysis_result = remove_tags(analysis_result1)
    await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)

    await bot.send_message(us_id, analysis_result)
    await bot.send_message(us_id, "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –∏–º–µ–Ω–Ω–æ <b>–≤–∞–º</b>?", reply_markup=keyboard)

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('personal_'))
async def personal_cb(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    analysis_type = parts[1]
    item_id = parts[2]
    us_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id

    analysis_matrix = {
        'face': ANALYSIS_P_FACE_ASS,
        'body': ANALYSIS_P_BODY_ASS,
        'hair': ANALYSIS_P_HAIR_ASS,
    }
    db_matrix = {
        'face': "face",
        'body': "body",
        'hair': "hair",
    }

    analysis_var = analysis_matrix.get(analysis_type)
    db_var = db_matrix.get(analysis_type)
    
    sticker_message = await bot.send_sticker(chat_id=callback_query.message.chat.id, sticker=random.choice(STICKERLIST))
    db_info = await fetch_product_details(item_id)
    # user_info = await get_user_data(us_id)
    user_info_general = await fetch_user_data(us_id, "general")
    user_info_type = await fetch_user_data(us_id, db_var)
    gpt_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {db_info}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info_general}, {user_info_type}"
    pers_analysis1 = await no_thread_ass(gpt_message, analysis_var)
    pers_analysis = remove_tags(pers_analysis1)
    await bot.delete_message(chat_id=chat_id, message_id=sticker_message.message_id)
    await state.update_data(pers_analysis=pers_analysis)
    buttons = [
        [InlineKeyboardButton(text="–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω—É –±–∞–Ω–æ—á–∫—É", callback_data="analysis")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ê–≤–æ–∫–∞–¥–æ Bot –ø—Ä–æ —ç—Ç—É –±–∞–Ω–æ—á–∫—É", callback_data="yapp_with_extra_info")]
    ]

    await callback_query.message.answer(pers_analysis, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await callback_query.answer()


@router.message()
async def default_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if message.photo:
        file_id = message.photo[-1].file_id

        await message.answer(f"Here is the file_id of your image:\n\n<code>{file_id}</code>\n\n"
                            "You can use this file_id to send the image in your bot.")
    await state.update_data(full_sequence=False)
    buttons = [
        [InlineKeyboardButton(text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç", callback_data="analysis")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–ù–∞—á–∞–ª–æ", callback_data="questionaire2")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–õ–∏—Ü–æ", callback_data="questionnaire_face")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–¢–µ–ª–æ", callback_data="questionnaire_body")],
        [InlineKeyboardButton(text="–û–ø—Ä–æ—Å–Ω–∏–∫_–í–æ–ª–æ—Å—ã", callback_data="questionnaire_hair")],
        [InlineKeyboardButton(text="–§—É–ª–ª_–≤–≤–æ–¥–Ω–∞—è_–≤–µ—Ä—Å–∏—è", callback_data="all_questionnaires")],
        [InlineKeyboardButton(text="setstate_yapp", callback_data="setstate_yapp")],
        ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if not current_state:
        if message.sticker:
            sticker_id = message.sticker.file_id
            await message.answer(f"{sticker_id}")
        else: 
            await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é", reply_markup=keyboard)
    else:
        await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")


async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
