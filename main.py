import asyncio
import aiogram
import os
import logging
from aiogram import Bot, Dispatcher, types
import openai
import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, html, Router, BaseMiddleware, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, InputMediaPhoto, InputMediaVideo
from openai import AsyncOpenAI, OpenAI
import shelve
import json

from functions import *
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")
ASSISTANT_ID = os.getenv("RECOGNIZE_MAKEUP_ASS")
ASSISTANT_ID_2 = os.getenv("FIND_PRODUCT_ASS")

ANALYSIS_G_FACE_ASS = os.getenv("ANALYSIS_G_FACE_ASS")
ANALYSIS_G_BODY_ASS = os.getenv("ANALYSIS_G_BODY_ASS")
ANALYSIS_G_HAIR_ASS = os.getenv("ANALYSIS_G_HAIR_ASS")

ANALYSIS_P_FACE_ASS = os.getenv("ANALYSIS_P_FACE_ASS")
ANALYSIS_P_BODY_ASS = os.getenv("ANALYSIS_P_BODY_ASS")
ANALYSIS_P_HAIR_ASS = os.getenv("ANALYSIS_P_HAIR_ASS")

TOKEN = BOT_TOKEN

bot = Bot(token=TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
storage = MemoryStorage()
router = Router()
dp = Dispatcher(storage=storage)


class StateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: Message, data: dict):
        state = data['state']
        current_state = await state.get_state()
        data['current_state'] = current_state
        return await handler(event, data)


class UserState(StatesGroup):
    info_coll = State()
    recognition = State()

class Questionnaire(StatesGroup):
    age = State()
    gender = State()
    location = State()
    allergy = State()
    lifestyle = State()
    phototype = State()
    activity = State()
    water_intake = State()
    stress = State()
    habits = State()

class Questionnaire2(StatesGroup):
    intro_answer = State()
    age = State()
    gender = State()
    location = State()
    allergy = State()
    lifestyle = State()
    phototype = State()
    activity = State()
    water_intake = State()
    stress = State()
    habits = State()
    ethics = State()

@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    buttons = [[InlineKeyboardButton(
        text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç", callback_data="analysis")], [InlineKeyboardButton(
        text="–û–ø—Ä–æ—Å–Ω–∏–∫", callback_data="questionaire")], [InlineKeyboardButton(
        text="–û–ø—Ä–æ—Å–Ω–∏–∫_2", callback_data="questionaire2")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    step0txt = "–ü—Ä–∏–≤–µ—Ç"
    await message.answer(step0txt, reply_markup=keyboard)

@router.message(StateFilter(Questionnaire2.intro_answer))
async def process_intro_answer(message: types.Message, state: FSMContext):
    await state.set_state(Questionnaire2.age)
    await message.answer(
        "1) –†–∞–∑ —É–∂ —É –Ω–∞—Å —Å —Ç–æ–±–æ–π —á–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, —Å–∫–∞–∂–∏, —Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç =) –û–±–µ—â–∞—é, —ç—Ç–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –º–µ–∂–¥—É –Ω–∞–º–∏! –ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, 35"
    )

@router.message(StateFilter(Questionnaire2.age))
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")],
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")]
        ]
    )
    await state.set_state(Questionnaire2.gender)
    await message.answer("2) –¢–≤–æ–π –ø–æ–ª", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire2.gender), lambda c: c.data.startswith("gender_"))
async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = "–ñ–µ–Ω—Å–∫–∏–π" if callback_query.data == "gender_female" else "–ú—É–∂—Å–∫–æ–π"
    await state.update_data(gender=gender)
    await state.set_state(Questionnaire2.location)
    await callback_query.message.answer(
        "3) –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞ –∏ –∫–ª–∏–º–∞—Ç–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≥–¥–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –≥–æ–¥–∞\n"
        "–ù–∞–ø–∏—à–∏ –≤–æ—Ç –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –†–æ—Å—Å–∏—è, –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
    )
    await callback_query.answer()

@router.message(StateFilter(Questionnaire2.location))
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="allergy_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="allergy_no")]
        ]
    )
    await state.set_state(Questionnaire2.allergy)
    await message.answer("4) –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–º —Ä–µ–∞–∫—Ü–∏—è–º?", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire2.allergy), lambda c: c.data.startswith("allergy_"))
async def process_allergy(callback_query: types.CallbackQuery, state: FSMContext):
    allergy = "–î–∞" if callback_query.data == "allergy_yes" else "–ù–µ—Ç"
    await state.update_data(allergy=allergy)
    await state.set_state(Questionnaire2.lifestyle)
    await callback_query.message.answer(
        "5) –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: –∫–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–≤–æ—é –∂–∏–∑–Ω—å? –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤\n"
        "1) –ß–∞—Å—Ç–æ –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ\n"
        "2) –†–∞–±–æ—Ç–∞—é –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏ (—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º –∏–ª–∏ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º)\n"
        "3) –°–∏–¥—è—á–∞—è –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞\n"
        "4) –ß–∞—Å—Ç–æ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏–ª–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é (–≤—ã—Å–æ–∫–∞—è –ø–æ—Ç–ª–∏–≤–æ—Å—Ç—å)\n"
        "5) –ú–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —ç—Ç–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π\n"
        "–£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2)"
    )
    await callback_query.answer()

@router.message(StateFilter(Questionnaire2.lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    lifestyle = [int(x) for x in message.text.replace(",", " ").split()]
    await state.update_data(lifestyle=lifestyle)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text=str(i), callback_data=f"phototype_{i}") for i in range(1, 7)
        ]]
    )
    await state.set_state(Questionnaire2.phototype)
    await message.answer(
        "6) –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ç–æ—Ç–∏–ø —Ç–≤–æ–µ–π –∫–æ–∂–∏:\n"
        "1 ‚Äî –û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Å—Ä–∞–∑—É –∫—Ä–∞—Å–Ω–µ–µ—Ç\n"
        "2 ‚Äî –°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º\n"
        "3 ‚Äî –°–≤–µ—Ç–ª–∞—è/—Å—Ä–µ–¥–Ω—è—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, –∑–∞–≥–æ—Ä–∞–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ\n"
        "4 ‚Äî –°—Ä–µ–¥–Ω—è—è/–æ–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ —Å–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
        "5 ‚Äî –¢–µ–º–Ω–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç, –±—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç\n"
        "6 ‚Äî –û—á–µ–Ω—å —Ç–µ–º–Ω–∞—è –∫–æ–∂–∞, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–≥–æ—Ä–∞–µ—Ç",
        reply_markup=keyboard
    )

@router.callback_query(StateFilter(Questionnaire2.phototype), lambda c: c.data.startswith("phototype_"))
async def process_phototype(callback_query: types.CallbackQuery, state: FSMContext):
    phototype = callback_query.data.split("_")[1]
    await state.update_data(phototype=phototype)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–∞—è", callback_data="activity_low")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω—è—è", callback_data="activity_mid")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∞—è", callback_data="activity_high")]
        ]
    )
    await state.set_state(Questionnaire2.activity)
    await callback_query.message.answer("7) –ö–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ—é —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire2.activity), lambda c: c.data.startswith("activity_"))
async def process_activity(callback_query: types.CallbackQuery, state: FSMContext):
    activity_map = {
        "activity_low": "–ù–∏–∑–∫–∞—è",
        "activity_mid": "–°—Ä–µ–¥–Ω—è—è",
        "activity_high": "–í—ã—Å–æ–∫–∞—è"
    }
    activity = activity_map[callback_query.data]
    await state.update_data(activity=activity)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞", callback_data="water_<1")],
            [InlineKeyboardButton(text="1‚Äì2 –ª–∏—Ç—Ä–∞", callback_data="water_1-2")],
            [InlineKeyboardButton(text="–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤", callback_data="water_>2")]
        ]
    )
    await state.set_state(Questionnaire2.water_intake)
    await callback_query.message.answer("8) –°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç—ã –ø—å–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire2.water_intake), lambda c: c.data.startswith("water_"))
async def process_water_intake(callback_query: types.CallbackQuery, state: FSMContext):
    water_map = {
        "water_<1": "–ú–µ–Ω—å—à–µ 1 –ª–∏—Ç—Ä–∞",
        "water_1-2": "1‚Äì2 –ª–∏—Ç—Ä–∞",
        "water_>2": "–ë–æ–ª–µ–µ 2 –ª–∏—Ç—Ä–æ–≤"
    }
    water_intake = water_map[callback_query.data]
    await state.update_data(water_intake=water_intake)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="stress_low")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="stress_mid")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="stress_high")]
        ]
    )
    await state.set_state(Questionnaire2.stress)
    await callback_query.message.answer("9) –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire2.stress), lambda c: c.data.startswith("stress_"))
async def process_stress(callback_query: types.CallbackQuery, state: FSMContext):
    stress_map = {
        "stress_low": "–ù–∏–∑–∫–∏–π",
        "stress_mid": "–°—Ä–µ–¥–Ω–∏–π",
        "stress_high": "–í—ã—Å–æ–∫–∏–π"
    }
    stress = stress_map[callback_query.data]
    await state.update_data(stress=stress)
    stress_message_map = {
        "stress_low": "–ü–æ–ª—É—á–∞–µ—Ç—Å—è, —Ç—ã –æ—á–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —á–µ–ª–æ–≤–µ–∫! –†–µ–¥–∫–æ—Å—Ç—å üåç",
        "stress_mid": "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ —Å–∞–º–æ–ø–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Öüíñ",
        "stress_high": "–û—á–µ–Ω—å –∏ –æ—á–µ–Ω—å —Ç–µ–±—è –ø–æ–Ω–∏–º–∞—é! –ë–æ–ª—å—à–µ 70% –ª—é–¥–µ–π –ø–æ–¥–≤–µ—Ä–∂–µ–Ω—ã –≤—ã—Å–æ–∫–æ–º—É —Å—Ç—Ä–µ—Å—Å—É, –Ω–µ –∑–∞–±—ã–≤–∞–π —Å–µ–±—è –∏–Ω–æ–≥–¥–∞ —Å–∏–ª—å–Ω–æ-—Å–∏–ª—å–Ω–æ –±–∞–ª–æ–≤–∞—Ç—å üå∏"
    }
    await callback_query.message.answer(stress_message_map[callback_query.data])
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ", callback_data="habits_smoking")],
            [InlineKeyboardButton(text="–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_drinking")],
            [InlineKeyboardButton(text="–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è", callback_data="habits_both")],
            [InlineKeyboardButton(text="–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="habits_none")]
        ]
    )
    await state.set_state(Questionnaire2.habits)
    await callback_query.message.answer("10) –ö–∞–∫–∞—è –∏–∑ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ —Ç–µ–±–µ —Å–≤–æ–π—Å—Ç–≤–µ–Ω–Ω–∞?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire2.habits), lambda c: c.data.startswith("habits_"))
async def process_habits(callback_query: types.CallbackQuery, state: FSMContext):
    habits_map = {
        "habits_smoking": "–ö—É—Ä–µ–Ω–∏–µ",
        "habits_drinking": "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
        "habits_both": "–ö—É—Ä–µ–Ω–∏–µ –∏ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è",
        "habits_none": "–ù–µ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫"
    }
    habits = habits_map[callback_query.data]
    await state.update_data(habits=habits)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free", callback_data="ethics_cruelty_free")],
            [InlineKeyboardButton(text="–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è", callback_data="ethics_none")]
        ]
    )
    await state.set_state(Questionnaire2.ethics)
    await callback_query.message.answer("11) –≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: —á—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ –≤ –∫–æ—Å–º–µ—Ç–∏–∫–µ?", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(StateFilter(Questionnaire2.ethics), lambda c: c.data.startswith("ethics_"))
async def process_ethics(callback_query: types.CallbackQuery, state: FSMContext):
    ethics = "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å–æ—Å—Ç–∞–≤, Vegan –ø—Ä–æ–¥—É–∫—Ç –∏ Cruelty-free" if callback_query.data == "ethics_cruelty_free" else "–≠—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"
    await state.update_data(ethics=ethics)
    user_data = await state.get_data()
    await callback_query.message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ü–æ–ª: {user_data['gender']}\n"
        f"–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {user_data['location']}\n"
        f"–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergy']}\n"
        f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: {', '.join(map(str, user_data['lifestyle']))}\n"
        f"–§–æ—Ç–æ—Ç–∏–ø: {user_data['phototype']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']}\n"
        f"–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º: {user_data['water_intake']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {user_data['stress']}\n"
        f"–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: {user_data['habits']}\n"
        f"–≠—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_data['ethics']}"
    )
    await state.clear()

@router.message(StateFilter(Questionnaire.age))
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="gender_male")],
            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")]
        ]
    )
    await state.set_state(Questionnaire.gender)
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–ª?", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.gender), lambda c: c.data.startswith("gender_"))
async def process_gender(callback_query: types.CallbackQuery, state: FSMContext):
    gender = "–ú—É–∂—Å–∫–æ–π" if callback_query.data == "gender_male" else "–ñ–µ–Ω—Å–∫–∏–π"
    await state.update_data(gender=gender)
    await state.set_state(Questionnaire.location)
    await callback_query.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É –∏ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.location))
async def process_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="allergy_yes")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="allergy_no")]
        ]
    )
    await state.set_state(Questionnaire.allergy)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏–∏?", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.allergy), lambda c: c.data.startswith("allergy_"))
async def process_allergy(callback_query: types.CallbackQuery, state: FSMContext):
    allergy = "–î–∞" if callback_query.data == "allergy_yes" else "–ù–µ—Ç"
    await state.update_data(allergy=allergy)
    await state.set_state(Questionnaire.lifestyle)
    await callback_query.message.answer(
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏:\n"
        "1. –ß–∞—Å—Ç–æ–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ —Å–æ–ª–Ω—Ü–µ\n"
        "2. –†–∞–±–æ—Ç–∞ –≤ —Å—É—Ö–æ–º –ø–æ–º–µ—â–µ–Ω–∏–∏\n"
        "3. –ß–∞—Å—Ç—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ, —á—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2):"
    )
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.lifestyle))
async def process_lifestyle(message: types.Message, state: FSMContext):
    await state.update_data(lifestyle=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=str(i), callback_data=f"phototype_{i}") for i in range(1, 7)]
        ]
    )
    await state.set_state(Questionnaire.phototype)
    await message.answer("–ö–∞–∫–æ–π —É –≤–∞—Å —Ñ–æ—Ç–æ—Ç–∏–ø –æ—Ç 1 –¥–æ 6?", reply_markup=keyboard)

@router.callback_query(StateFilter(Questionnaire.phototype), lambda c: c.data.startswith("phototype_"))
async def process_phototype(callback_query: types.CallbackQuery, state: FSMContext):
    phototype = callback_query.data.split("_")[1]
    await state.update_data(phototype=phototype)
    await state.set_state(Questionnaire.activity)
    await callback_query.message.answer("–ö–∞–∫–æ–≤ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?")
    await callback_query.answer()

@router.message(StateFilter(Questionnaire.activity))
async def process_activity(message: types.Message, state: FSMContext):
    await state.update_data(activity=message.text)
    await state.set_state(Questionnaire.water_intake)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º:")

@router.message(StateFilter(Questionnaire.water_intake))
async def process_water_intake(message: types.Message, state: FSMContext):
    await state.update_data(water_intake=message.text)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∏–∑–∫–∏–π", callback_data="stress_low")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="stress_medium")],
            [InlineKeyboardButton(text="–í—ã—Å–æ–∫–∏–π", callback_data="stress_high")]
        ]
    )
    await state.set_state(Questionnaire.stress)
    await message.answer("–ö–∞–∫–æ–≤ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞?", reply_markup=keyboard)

# Step 9: Stress
@router.callback_query(StateFilter(Questionnaire.stress), lambda c: c.data.startswith("stress_"))
async def process_stress(callback_query: types.CallbackQuery, state: FSMContext):
    stress = {
        "stress_low": "–ù–∏–∑–∫–∏–π",
        "stress_medium": "–°—Ä–µ–¥–Ω–∏–π",
        "stress_high": "–í—ã—Å–æ–∫–∏–π"
    }[callback_query.data]
    await state.update_data(stress=stress)
    await state.set_state(Questionnaire.habits)
    await callback_query.message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≤—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏? –û–ø–∏—à–∏—Ç–µ:")
    await callback_query.answer()

# Step 10: Habits
@router.message(StateFilter(Questionnaire.habits))
async def process_habits(message: types.Message, state: FSMContext):
    await state.update_data(habits=message.text)
    user_data = await state.get_data()
    buttons = [[InlineKeyboardButton(
        text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç", callback_data="analysis")], [InlineKeyboardButton(
        text="–û–ø—Ä–æ—Å–Ω–∏–∫", callback_data="questionaire")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    us_id = message.from_user.id

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –í–æ—Ç –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ü–æ–ª: {user_data['gender']}\n"
        f"–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {user_data['location']}\n"
        f"–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–ª–ª–µ—Ä–≥–∏–∏: {user_data['allergy']}\n"
        f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏: {user_data['lifestyle']}\n"
        f"–§–æ—Ç–æ—Ç–∏–ø: {user_data['phototype']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data['activity']}\n"
        f"–ü–∏—Ç—å–µ–≤–æ–π —Ä–µ–∂–∏–º: {user_data['water_intake']}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {user_data['stress']}\n"
        f"–í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏: {user_data['habits']}",
        reply_markup=keyboard
    )

    user_data = {
                "age": f"{user_data['age']}",
                "gender": f"{user_data['gender']}",
                "location": f"{user_data['location']}",
                "allergy": f"{user_data['allergy']}",
                "lifestyle": f"{user_data['lifestyle']}",
                "phototype": f"{user_data['phototype']}",
                "activity": f"{user_data['activity']}",
                "water_intake": f"{user_data['water_intake']}",
                "stress": f"{user_data['stress']}",
                "habits": f"{user_data['habits']}"
            }
    response = await send_user_data(us_id, user_data)
    await message.answer(str(response))
    await state.clear()


@router.message(StateFilter(UserState.recognition))
async def recognition_handler(message: Message, state: FSMContext) -> None:
    user_data = await state.get_data()
    product_type = user_data.get("product_type")
    us_id = str(message.from_user.id)
    if message.text:
        med_name = await generate_response(message.text, us_id, ASSISTANT_ID)
        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        response = await remove_json_block(response1)

        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = [[InlineKeyboardButton(text="–í—Å–µ –Ω–µ —Ç–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"analysis")],]
            product_messages = []
            for product in extracted_list:
                product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
    elif message.voice:

        transcribed_text = await audio_file(message.voice.file_id)
        med_name = await generate_response(transcribed_text, us_id, ASSISTANT_ID)
        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        response = await remove_json_block(response1)

        await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = []
            product_messages = []
            for product in extracted_list:
                product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
    elif message.photo:

        file = await bot.get_file(message.photo[-1].file_id)
        file_path = file.file_path
        file_url = f"https://api.telegram.org/file/bot{bot.token}/{file_path}"
        med_name = await process_url(file_url, us_id, ASSISTANT_ID)
        await message.answer(f"–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫: {med_name}, —Å–µ–π—á–∞—Å –Ω–∞–π–¥—É –≤ –±–∞–∑–µ –∏ –¥–∞–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
        response1 = await no_thread_ass(med_name, ASSISTANT_ID_2)
        response = await remove_json_block(response1)

        await message.answer(f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –≤ –±–∞–∑–µ: {response}")
        extracted_list = await extract_list_from_input(response1)
        print(extracted_list)
        if extracted_list:
            buttons = []
            product_messages = []
            for product in extracted_list:
                product_messages.append(f"id: {product.get('Identifier')}, name: {product.get('FullName')}")
                buttons.append(
                    [
                InlineKeyboardButton(
                    text=product.get('FullName'),
                    callback_data=f"item_{product_type}_{product.get('Identifier')}"
                )
            ]
        )
            combined_message = "\n".join(product_messages)
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            await message.answer(f"–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤ \n{combined_message}", reply_markup=keyboard)
    else:
        await message.answer("–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ñ–æ—Ç–æ")

@router.callback_query(lambda c: c.data == 'analysis')
async def process_analysis_cb(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: –õ–∏—Ü–æ –∏–ª–∏ –¢–µ–ª–æ"
    buttons = [
        [InlineKeyboardButton(text="–õ–∏—Ü–æ", callback_data="product_type_face")],
        [InlineKeyboardButton(text="–¢–µ–ª–æ", callback_data="product_type_body")],
        [InlineKeyboardButton(text="–í–æ–ª–æ—Å—ã", callback_data="product_type_hair")],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await bot.send_message(us_id, text, reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('product_type_'))
async def process_product_type(callback_query: CallbackQuery, state: FSMContext):
    product_type = callback_query.data.split('_')[2]  # Extracts 'face' or 'body'
    await state.update_data(product_type=product_type)
    us_id = callback_query.from_user.id
    text = "–°–∫–∏–Ω—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É —Ç–≤–æ–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é? \n–ò–ª–∏ –Ω–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π –Ω–∞–∑–≤–∞–Ω–∏–µ"
    await state.set_state(UserState.recognition)
    await bot.send_message(us_id, text)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'questionaire')
async def process_questionaire(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    text = "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à –æ–ø—Ä–æ—Å. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"
    await bot.send_message(us_id, text)
    await state.set_state(Questionnaire.age)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'questionaire2')
async def process_questionaire(callback_query: CallbackQuery, state: FSMContext):
    us_id = callback_query.from_user.id
    text = (
        "–ß–∞—Å—Ç—å 1/4 üü¢‚ö™Ô∏è‚ö™Ô∏è‚ö™Ô∏è\n"
        "11 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ç–µ–±–µ\n\n"
        "–ò–º—è, –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç–≤–æ–µ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Äì —è –¥–æ–ª–∂–Ω–∞ –∑–Ω–∞—Ç—å –≤—Å—ë –æ —Ç–≤–æ–µ–º —Å—Ç–∏–ª–µ –∂–∏–∑–Ω–∏, —Ñ–æ—Ç–æ—Ç–∏–ø–µ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö. "
        "–ß—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–∞–∫, —á—Ç–æ —è –¥–ª—è —Ç–µ–±—è –æ–¥–æ–±—Ä–∏–ª–∞ —Å—Ä–µ–¥—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–±–µ –ø–æ —ç—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º."
    )
    await bot.send_message(us_id, text)
    await state.set_state(Questionnaire2.intro_answer)
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith('item_'))
async def process_item(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    analysis_type = parts[1]
    item_id = parts[2]

    analysis_matrix = {
        'face': ANALYSIS_G_FACE_ASS,
        'body': ANALYSIS_G_BODY_ASS,
        'hair': ANALYSIS_G_HAIR_ASS,
    }

    analysis_var = analysis_matrix.get(analysis_type)
    print(f"analysing using {analysis_var}")

    if not analysis_var:
        await callback_query.answer("Invalid analysis type.", show_alert=True)
        return

    us_id = callback_query.from_user.id

    buttons = [
        InlineKeyboardButton(text="yep", callback_data=f'personal_{analysis_type}_{item_id}'),
        InlineKeyboardButton(text="nope", callback_data='analysis')
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

    db_info = await fetch_product_details(item_id)
    analysis_result1 = await no_thread_ass(str(db_info), analysis_var)
    analysis_result = remove_tags(analysis_result1)

    await bot.send_message(us_id, analysis_result)
    await bot.send_message(us_id, "–•–æ—á–µ—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?", reply_markup=keyboard)

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('personal_'))
async def personal_cb(callback_query: CallbackQuery, state: FSMContext):
    parts = callback_query.data.split('_')
    analysis_type = parts[1]
    item_id = parts[2]
    us_id = callback_query.from_user.id

    analysis_matrix = {
        'face': ANALYSIS_P_FACE_ASS,
        'body': ANALYSIS_P_BODY_ASS,
        'hair': ANALYSIS_P_HAIR_ASS,
    }

    analysis_var = analysis_matrix.get(analysis_type)
    
    db_info = await fetch_product_details(item_id)
    user_info = await get_user_data(us_id)
    gpt_message = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ: {db_info}, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}"
    pers_analysis = await no_thread_ass(gpt_message, analysis_var)
    await bot.send_message(us_id, pers_analysis)
    await callback_query.answer()


@router.message()
async def default_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    buttons = [[InlineKeyboardButton(
        text="–ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ üîç", callback_data="analysis")], [InlineKeyboardButton(
        text="–û–ø—Ä–æ—Å–Ω–∏–∫", callback_data="questionaire")], [InlineKeyboardButton(
        text="–û–ø—Ä–æ—Å–Ω–∏–∫_2", callback_data="questionaire2")]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    if not current_state:
        await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é", reply_markup=keyboard)
    else:
        await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")


async def main() -> None:
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    dp.include_router(router)
    dp.message.middleware(StateMiddleware())
    bot = Bot(token=TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
